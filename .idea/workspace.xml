<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="BranchesTreeState">
    <expand>
      <path>
        <item name="ROOT" type="e8cecc67:BranchNodeDescriptor" />
        <item name="LOCAL_ROOT" type="e8cecc67:BranchNodeDescriptor" />
      </path>
      <path>
        <item name="ROOT" type="e8cecc67:BranchNodeDescriptor" />
        <item name="REMOTE_ROOT" type="e8cecc67:BranchNodeDescriptor" />
      </path>
      <path>
        <item name="ROOT" type="e8cecc67:BranchNodeDescriptor" />
        <item name="REMOTE_ROOT" type="e8cecc67:BranchNodeDescriptor" />
        <item name="GROUP_NODE:origin" type="e8cecc67:BranchNodeDescriptor" />
      </path>
    </expand>
    <select />
  </component>
  <component name="ChangeListManager">
    <list default="true" id="e71e3968-e7af-4df1-adb9-986cabb8ecaf" name="Default Changelist" comment="Better division between output in and processing">
      <change beforePath="$PROJECT_DIR$/.idea/workspace.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/workspace.xml" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/src/split_text/config.clj" beforeDir="false" afterPath="$PROJECT_DIR$/src/split_text/config.clj" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/src/split_text/core.clj" beforeDir="false" afterPath="$PROJECT_DIR$/src/split_text/core.clj" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/src/split_text/io.clj" beforeDir="false" afterPath="$PROJECT_DIR$/src/split_text/io.clj" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/src/split_text/markdown.clj" beforeDir="false" afterPath="$PROJECT_DIR$/src/split_text/markdown.clj" afterDir="false" />
    </list>
    <option name="SHOW_DIALOG" value="false" />
    <option name="HIGHLIGHT_CONFLICTS" value="true" />
    <option name="HIGHLIGHT_NON_ACTIVE_CHANGELIST" value="false" />
    <option name="LAST_RESOLUTION" value="IGNORE" />
  </component>
  <component name="DepsProjectDetails">
    <option name="cachedModuleDetails">
      <map>
        <entry key="$PROJECT_DIR$/deps.edn">
          <value>
            <ModuleDetails>
              <option name="details" value="{:paths [&quot;src&quot;], :deps {org.clojure/clojure {:mvn/version &quot;1.10.1&quot;}, hickory/hickory {:mvn/version &quot;0.7.1&quot;}, com.rpl/specter {:mvn/version &quot;1.1.3&quot;}, org.clojure/data.json {:mvn/version &quot;1.0.0&quot;}, clj-http/clj-http {:mvn/version &quot;3.10.1&quot;}, hiccup/hiccup {:mvn/version &quot;2.0.0-alpha2&quot;}, org.clojure/tools.cli {:mvn/version &quot;1.0.194&quot;}, juxt/crux-http-client {:mvn/version &quot;20.12-1.13.0-beta&quot;}}, :aliases {:1.4 {:override-deps {org.clojure/clojure {:mvn/version &quot;1.4.0&quot;}}}, :dev/repl {:main-opts [&quot;-e&quot; &quot;(load-file,(str,(System/getProperty,\&quot;user.home\&quot;),\&quot;/.clojure/dev.clj\&quot;))&quot;]}, :install {:extra-deps {slipset/deps-deploy {:mvn/version &quot;RELEASE&quot;}}, :main-opts [&quot;-m&quot; &quot;deps-deploy.deps-deploy&quot; &quot;install&quot;]}, :spec2 {:extra-deps {org.clojure/spec-alpha2 {:git/url &quot;https://github.com/clojure/spec-alpha2&quot;, :sha &quot;8ba5dc543872369129181c4432f438c82b6cd297&quot;}}}, :jar {:replace-deps {seancorfield/depstar {:mvn/version &quot;2.0.165&quot;}}, :exec-fn hf.depstar/jar, :exec-args {}}, :outdated {:extra-deps {antq/antq {:mvn/version &quot;RELEASE&quot;}}, :main-opts [&quot;-m&quot; &quot;antq.core&quot;]}, :portal {:extra-deps {djblue/portal {:mvn/version &quot;RELEASE&quot;}}}, :1.3 {:override-deps {org.clojure/clojure {:mvn/version &quot;1.3.0&quot;}}}, :eastwood {:extra-deps {jonase/eastwood {:mvn/version &quot;RELEASE&quot;}}, :main-opts [&quot;-m&quot; &quot;eastwood.lint&quot; &quot;{:source-paths,[\&quot;src\&quot;],:test-paths,[\&quot;test\&quot;]}&quot;]}, :reveal {:extra-deps {vlaaad/reveal {:mvn/version &quot;RELEASE&quot;}}, :main-opts [&quot;-m&quot; &quot;vlaaad.reveal&quot; &quot;repl&quot;], :jvm-opts [&quot;-Dvlaaad.reveal.prefs={:font-size,24}&quot;]}, :socket {:jvm-opts [&quot;-Dclojure.server.repl={:address,\&quot;0.0.0.0\&quot;,:port,50505,:accept,clojure.core.server/repl}&quot;]}, :check {:extra-deps {athos/clj-check {:git/url &quot;https://github.com/athos/clj-check&quot;, :sha &quot;cd1f25456de5eebda0a69602dd3445905382b3a4&quot;}}, :main-opts [&quot;-m&quot; &quot;clj-check.check&quot;]}, :expect {:extra-deps {expectations/expectations {:mvn/version &quot;RELEASE&quot;}, expectations/clojure-test {:mvn/version &quot;RELEASE&quot;}}}, :new {:extra-deps {seancorfield/clj-new {:mvn/version &quot;RELEASE&quot;}}, :exec-fn clj-new/create, :exec-args {:template lib/lib}}, :bench {:extra-deps {criterium/criterium {:mvn/version &quot;RELEASE&quot;}}}, :liquid {:extra-deps {mogenslund/liquid {:mvn/version &quot;RELEASE&quot;}}, :main-opts [&quot;-m&quot; &quot;liq.core&quot;]}, :jedi-time {:extra-deps {jedi-time/jedi-time {:mvn/version &quot;0.2.0&quot;}}}, :pne {:main-opts [&quot;-e&quot; &quot;(defmacro,$,[&amp;,body],(list,'while,(list,'when-let,'[$_,(read-line)],(let,[v,(gensym)],(list,'let,(vector,v,(list*,'do,body)),(list,'println,v))),'$_)))&quot;]}, :1.8 {:override-deps {org.clojure/clojure {:mvn/version &quot;1.8.0&quot;}}}, :1.10 {:override-deps {org.clojure/clojure {:mvn/version &quot;1.10.0&quot;}}}, :1.1 {:override-deps {org.clojure/clojure {:mvn/version &quot;1.1.0&quot;}}}, :rebel {:extra-deps {com.bhauman/rebel-readline {:mvn/version &quot;RELEASE&quot;}}, :main-opts [&quot;-m&quot; &quot;rebel-readline.main&quot;]}, :uberjar {:replace-deps {seancorfield/depstar {:mvn/version &quot;2.0.165&quot;}}, :exec-fn hf.depstar/uberjar, :exec-args {:aot true}}, :measure {:extra-deps {com.clojure-goes-fast/clj-memory-meter {:mvn/version &quot;RELEASE&quot;}}}, :rebl {:extra-deps {org.clojure/data.json {:mvn/version &quot;0.2.7&quot;}, org.openjfx/javafx-swing {:mvn/version &quot;15-ea+6&quot;}, org.openjfx/javafx-controls {:mvn/version &quot;15-ea+6&quot;}, org.yaml/snakeyaml {:mvn/version &quot;1.25&quot;}, com.cognitect/rebl {:mvn/version &quot;0.9.242&quot;}, org.clojure/data.csv {:mvn/version &quot;0.1.4&quot;}, org.openjfx/javafx-base {:mvn/version &quot;15-ea+6&quot;}, org.openjfx/javafx-web {:mvn/version &quot;15-ea+6&quot;}, org.openjfx/javafx-fxml {:mvn/version &quot;15-ea+6&quot;}, org.clojure/core.async {:mvn/version &quot;0.6.532&quot;}}, :main-opts [&quot;-e&quot; &quot;(-&gt;&gt;(Thread/currentThread)(.getContextClassLoader)(clojure.lang.DynamicClassLoader.)(.setContextClassLoader,(Thread/currentThread)))&quot; &quot;-m&quot; &quot;cognitect.rebl&quot;]}, :1.2 {:override-deps {org.clojure/clojure {:mvn/version &quot;1.2.1&quot;}}}, :depstar {:replace-deps {seancorfield/depstar {:mvn/version &quot;2.0.165&quot;}}, :ns-default hf.depstar/hf.depstar, :exec-args {}}, :nrepl {:extra-deps {nrepl/nrepl {:mvn/version &quot;RELEASE&quot;}}, :main-opts [&quot;-m&quot; &quot;nrepl.cmdline&quot;]}, :prepl {:jvm-opts [&quot;-Dclojure.server.repl={:port,40404,:accept,clojure.core.server/io-prepl}&quot;]}, :closh {:extra-deps {closh/closh {:git/url &quot;https://github.com/dundalek/closh.git&quot;, :tag &quot;v0.5.0&quot;, :sha &quot;6a7c0aa293616e2d28f7f735e915a301e44d2121&quot;}}, :main-opts [&quot;-m&quot; &quot;closh.zero.frontend.rebel&quot;]}, :1.5 {:override-deps {org.clojure/clojure {:mvn/version &quot;1.5.1&quot;}}}, :1.6 {:override-deps {org.clojure/clojure {:mvn/version &quot;1.6.0&quot;}}}, :graph {:deps {org.clojure/tools.deps.graph {:mvn/version &quot;1.0.46&quot;}}, :main-opts [&quot;-m&quot; &quot;clojure.tools.deps.graph&quot;]}, :repl {:extra-deps {vlaaad/reveal {:mvn/version &quot;1.1.163&quot;}}, :main-opts [&quot;-m&quot; &quot;vlaaad.reveal&quot; &quot;repl&quot;]}, :readme {:extra-deps {seancorfield/readme {:mvn/version &quot;RELEASE&quot;}}, :main-opts [&quot;-m&quot; &quot;seancorfield.readme&quot;]}, :1.10.2 {:override-deps {org.clojure/clojure {:mvn/version &quot;1.10.2-rc3&quot;}}}, :runner {:extra-deps {com.cognitect/test-runner {:git/url &quot;https://github.com/cognitect-labs/test-runner&quot;, :sha &quot;b6b3193fcc42659d7e46ecd1884a228993441182&quot;}}, :main-opts [&quot;-m&quot; &quot;cognitect.test-runner&quot; &quot;-d&quot; &quot;test&quot; &quot;-d&quot; &quot;src/test/clojure&quot;]}, :1.7 {:override-deps {org.clojure/clojure {:mvn/version &quot;1.7.0&quot;}}}, :master {:override-deps {org.clojure/clojure {:mvn/version &quot;1.10.2-master-SNAPSHOT&quot;}}}, :add-libs {:extra-deps {org.clojure/tools.deps.alpha {:git/url &quot;https://github.com/clojure/tools.deps.alpha&quot;, :sha &quot;d77476f3d5f624249462e275ae62d26da89f320b&quot;}}, :main-opts [&quot;-e&quot; &quot;(-&gt;&gt;(Thread/currentThread)(.getContextClassLoader)(clojure.lang.DynamicClassLoader.)(.setContextClassLoader,(Thread/currentThread)))&quot;]}, :1.10.1 {:override-deps {org.clojure/clojure {:mvn/version &quot;1.10.1&quot;}}}, :1.9 {:override-deps {org.clojure/clojure {:mvn/version &quot;1.9.0&quot;}}}, :j14 {:jvm-opts [&quot;-XX:+ShowCodeDetailsInExceptionMessages&quot;]}, :socket-zero {:jvm-opts [&quot;-Dclojure.server.repl={:port,0,:accept,clojure.core.server/repl}&quot;], :main-opts [&quot;-e&quot; &quot;(.getLocalPort,(get-in,@#'clojure.core.server/servers,[\&quot;repl\&quot;,:socket]))&quot;]}, :deploy {:extra-deps {slipset/deps-deploy {:mvn/version &quot;RELEASE&quot;}}, :main-opts [&quot;-m&quot; &quot;deps-deploy.deps-deploy&quot; &quot;deploy&quot;]}, :test {:extra-paths [&quot;test&quot;]}, :comp {:extra-deps {compliment/compliment {:mvn/version &quot;RELEASE&quot;}}}, :dev {:main-opts [&quot;-e&quot; &quot;(load-file,(str,(System/getProperty,\&quot;user.home\&quot;),\&quot;/.clojure/dev.clj\&quot;))&quot;]}, :socket-rebl {:extra-deps {seancorfield/socket-rebl {:git/url &quot;https://github.com/seancorfield/socket-rebl&quot;, :sha &quot;60dd65cb8d03a9cf5eba21081cdfad5e27f72a8b&quot;}}, :jvm-opts [&quot;-Dclojure.server.repl={:port,50123,:accept,socket.rebl/repl}&quot;]}, :classes {:extra-paths [&quot;classes&quot;]}, :decompile {:extra-deps {com.clojure-goes-fast/clj-java-decompiler {:mvn/version &quot;RELEASE&quot;}}}, :reflect {:extra-deps {com.stuarthalloway/reflector {:git/url &quot;https://github.com/stuarthalloway/reflector&quot;, :sha &quot;93a0c19b4526c1180959e940202928d35e5c3cef&quot;}}}, :1.0 {:override-deps {org.clojure/clojure {:mvn/version &quot;1.0.0&quot;}}}, :deps {:extra-deps {org.clojure/tools.deps.alpha {:mvn/version &quot;0.6.496&quot;}}}}, :mvn/repos {&quot;central&quot; {:url &quot;https://repo1.maven.org/maven2/&quot;}, &quot;clojars&quot; {:url &quot;https://repo.clojars.org/&quot;}, &quot;sonatype&quot; {:url &quot;https://oss.sonatype.org/content/repositories/snapshots/&quot;}}, :system-aliases #{:1.4 :dev/repl :install :spec2 :jar :outdated :portal :1.3 :eastwood :reveal :socket :check :expect :new :bench :liquid :jedi-time :pne :1.8 :1.10 :1.1 :rebel :uberjar :measure :rebl :1.2 :depstar :nrepl :prepl :closh :1.5 :1.6 :graph :readme :1.10.2 :runner :1.7 :master :add-libs :1.10.1 :1.9 :j14 :socket-zero :deploy :test :comp :dev :socket-rebl :classes :decompile :reflect :1.0 :deps}, :deps-tree {org.clojure/data.json {:mvn/version &quot;1.0.0&quot;, :deps/manifest :mvn, :paths [&quot;C:\\Users\\MartinRoberts\\.m2\\repository\\org\\clojure\\data.json\\1.0.0\\data.json-1.0.0.jar&quot;], :children ()}, org.lz4/lz4-java {:mvn/version &quot;1.7.1&quot;, :deps/manifest :mvn, :dependents [com.taoensso/nippy], :paths [&quot;C:\\Users\\MartinRoberts\\.m2\\repository\\org\\lz4\\lz4-java\\1.7.1\\lz4-java-1.7.1.jar&quot;], :children ()}, org.clojure/clojure {:mvn/version &quot;1.10.1&quot;, :deps/manifest :mvn, :paths [&quot;C:\\Users\\MartinRoberts\\.m2\\repository\\org\\clojure\\clojure\\1.10.1\\clojure-1.10.1.jar&quot;], :children (org.clojure/core.specs.alpha org.clojure/spec.alpha)}, juxt/crux-http-client {:mvn/version &quot;20.12-1.13.0-beta&quot;, :deps/manifest :mvn, :paths [&quot;C:\\Users\\MartinRoberts\\.m2\\repository\\juxt\\crux-http-client\\20.12-1.13.0-beta\\crux-http-client-20.12-1.13.0-beta.jar&quot;], :children (com.nimbusds/nimbus-jose-jwt net.minidev/json-smart juxt/crux-core)}, commons-codec/commons-codec {:mvn/version &quot;1.12&quot;, :exclusions #{org.clojure/clojure}, :deps/manifest :mvn, :dependents [clj-http/clj-http], :paths [&quot;C:\\Users\\MartinRoberts\\.m2\\repository\\commons-codec\\commons-codec\\1.12\\commons-codec-1.12.jar&quot;], :children ()}, org.clojure/tools.logging {:mvn/version &quot;1.1.0&quot;, :deps/manifest :mvn, :dependents [juxt/crux-core], :paths [&quot;C:\\Users\\MartinRoberts\\.m2\\repository\\org\\clojure\\tools.logging\\1.1.0\\tools.logging-1.1.0.jar&quot;], :children ()}, org.clojure/core.specs.alpha {:mvn/version &quot;0.2.44&quot;, :deps/manifest :mvn, :dependents [org.clojure/clojure], :paths [&quot;C:\\Users\\MartinRoberts\\.m2\\repository\\org\\clojure\\core.specs.alpha\\0.2.44\\core.specs.alpha-0.2.44.jar&quot;], :children ()}, org.tukaani/xz {:mvn/version &quot;1.8&quot;, :deps/manifest :mvn, :dependents [com.taoensso/nippy], :paths [&quot;C:\\Users\\MartinRoberts\\.m2\\repository\\org\\tukaani\\xz\\1.8\\xz-1.8.jar&quot;], :children ()}, edn-query-language/eql {:mvn/version &quot;1.0.0&quot;, :deps/manifest :mvn, :dependents [juxt/crux-core], :paths [&quot;C:\\Users\\MartinRoberts\\.m2\\repository\\edn-query-language\\eql\\1.0.0\\eql-1.0.0.jar&quot;], :children ()}, org.clojure/spec.alpha {:mvn/version &quot;0.2.176&quot;, :deps/manifest :mvn, :dependents [org.clojure/clojure], :paths [&quot;C:\\Users\\MartinRoberts\\.m2\\repository\\org\\clojure\\spec.alpha\\0.2.176\\spec.alpha-0.2.176.jar&quot;], :children ()}, org.clojure/tools.cli {:mvn/version &quot;1.0.194&quot;, :deps/manifest :mvn, :paths [&quot;C:\\Users\\MartinRoberts\\.m2\\repository\\org\\clojure\\tools.cli\\1.0.194\\tools.cli-1.0.194.jar&quot;], :children ()}, com.taoensso/encore {:mvn/version &quot;3.9.2&quot;, :deps/manifest :mvn, :dependents [com.taoensso/nippy], :paths [&quot;C:\\Users\\MartinRoberts\\.m2\\repository\\com\\taoensso\\encore\\3.9.2\\encore-3.9.2.jar&quot;], :children (com.taoensso/truss)}, org.apache.httpcomponents/httpasyncclient {:mvn/version &quot;4.1.4&quot;, :exclusions #{org.clojure/clojure}, :deps/manifest :mvn, :dependents [clj-http/clj-http], :paths [&quot;C:\\Users\\MartinRoberts\\.m2\\repository\\org\\apache\\httpcomponents\\httpasyncclient\\4.1.4\\httpasyncclient-4.1.4.jar&quot;], :children (org.apache.httpcomponents/httpcore-nio)}, org.iq80.snappy/snappy {:mvn/version &quot;0.4&quot;, :deps/manifest :mvn, :dependents [com.taoensso/nippy], :paths [&quot;C:\\Users\\MartinRoberts\\.m2\\repository\\org\\iq80\\snappy\\snappy\\0.4\\snappy-0.4.jar&quot;], :children ()}, org.clojure/google-closure-library {:mvn/version &quot;0.0-20160609-f42b4a24&quot;, :deps/manifest :mvn, :dependents [org.clojure/clojurescript], :paths [&quot;C:\\Users\\MartinRoberts\\.m2\\repository\\org\\clojure\\google-closure-library\\0.0-20160609-f42b4a24\\google-closure-library-0.0-20160609-f42b4a24.jar&quot;], :children (org.clojure/google-closure-library-third-party)}, org.clojure/clojurescript {:mvn/version &quot;1.9.293&quot;, :deps/manifest :mvn, :dependents [hickory/hickory], :paths [&quot;C:\\Users\\MartinRoberts\\.m2\\repository\\org\\clojure\\clojurescript\\1.9.293\\clojurescript-1.9.293.jar&quot;], :children (org.clojure/google-closure-library org.mozilla/rhino com.google.javascript/closure-compiler-unshaded)}, slingshot/slingshot {:mvn/version &quot;0.12.2&quot;, :exclusions #{org.clojure/clojure}, :deps/manifest :mvn, :dependents [clj-http/clj-http], :paths [&quot;C:\\Users\\MartinRoberts\\.m2\\repository\\slingshot\\slingshot\\0.12.2\\slingshot-0.12.2.jar&quot;], :children ()}, org.apache.httpcomponents/httpcore-nio {:mvn/version &quot;4.4.10&quot;, :deps/manifest :mvn, :dependents [org.apache.httpcomponents/httpasyncclient], :paths [&quot;C:\\Users\\MartinRoberts\\.m2\\repository\\org\\apache\\httpcomponents\\httpcore-nio\\4.4.10\\httpcore-nio-4.4.10.jar&quot;], :children ()}, commons-io/commons-io {:mvn/version &quot;2.6&quot;, :exclusions #{org.clojure/clojure}, :deps/manifest :mvn, :dependents [clj-http/clj-http], :paths [&quot;C:\\Users\\MartinRoberts\\.m2\\repository\\commons-io\\commons-io\\2.6\\commons-io-2.6.jar&quot;], :children ()}, com.google.jsinterop/jsinterop-annotations {:mvn/version &quot;1.0.0&quot;, :deps/manifest :mvn, :dependents [com.google.javascript/closure-compiler-unshaded], :paths [&quot;C:\\Users\\MartinRoberts\\.m2\\repository\\com\\google\\jsinterop\\jsinterop-annotations\\1.0.0\\jsinterop-annotations-1.0.0.jar&quot;], :children ()}, com.nimbusds/nimbus-jose-jwt {:mvn/version &quot;8.2.1&quot;, :exclusions #{net.minidev/json-smart}, :deps/manifest :mvn, :dependents [juxt/crux-http-client], :paths [&quot;C:\\Users\\MartinRoberts\\.m2\\repository\\com\\nimbusds\\nimbus-jose-jwt\\8.2.1\\nimbus-jose-jwt-8.2.1.jar&quot;], :children (com.github.stephenc.jcip/jcip-annotations)}, org.agrona/agrona {:mvn/version &quot;1.7.2&quot;, :deps/manifest :mvn, :dependents [juxt/crux-core], :paths [&quot;C:\\Users\\MartinRoberts\\.m2\\repository\\org\\agrona\\agrona\\1.7.2\\agrona-1.7.2.jar&quot;], :children ()}, clj-http/clj-http {:mvn/version &quot;3.10.1&quot;, :deps/manifest :mvn, :paths [&quot;C:\\Users\\MartinRoberts\\.m2\\repository\\clj-http\\clj-http\\3.10.1\\clj-http-3.10.1.jar&quot;], :children (commons-codec/commons-codec org.apache.httpcomponents/httpasyncclient slingshot/slingshot commons-io/commons-io org.apache.httpcomponents/httpcore org.apache.httpcomponents/httpclient-cache org.apache.httpcomponents/httpclient potemkin/potemkin org.apache.httpcomponents/httpmime)}, org.ow2.asm/asm {:mvn/version &quot;5.0.4&quot;, :deps/manifest :mvn, :dependents [net.minidev/accessors-smart], :paths [&quot;C:\\Users\\MartinRoberts\\.m2\\repository\\org\\ow2\\asm\\asm\\5.0.4\\asm-5.0.4.jar&quot;], :children ()}, org.apache.httpcomponents/httpcore {:mvn/version &quot;4.4.12&quot;, :exclusions #{org.clojure/clojure}, :deps/manifest :mvn, :dependents [clj-http/clj-http], :paths [&quot;C:\\Users\\MartinRoberts\\.m2\\repository\\org\\apache\\httpcomponents\\httpcore\\4.4.12\\httpcore-4.4.12.jar&quot;], :children ()}, org.apache.httpcomponents/httpclient-cache {:mvn/version &quot;4.5.10&quot;, :exclusions #{org.clojure/clojure}, :deps/manifest :mvn, :dependents [clj-http/clj-http], :paths [&quot;C:\\Users\\MartinRoberts\\.m2\\repository\\org\\apache\\httpcomponents\\httpclient-cache\\4.5.10\\httpclient-cache-4.5.10.jar&quot;], :children ()}, clj-tuple/clj-tuple {:mvn/version &quot;0.2.2&quot;, :deps/manifest :mvn, :dependents [potemkin/potemkin], :paths [&quot;C:\\Users\\MartinRoberts\\.m2\\repository\\clj-tuple\\clj-tuple\\0.2.2\\clj-tuple-0.2.2.jar&quot;], :children ()}, org.mozilla/rhino {:mvn/version &quot;1.7R5&quot;, :deps/manifest :mvn, :dependents [org.clojure/clojurescript], :paths [&quot;C:\\Users\\MartinRoberts\\.m2\\repository\\org\\mozilla\\rhino\\1.7R5\\rhino-1.7R5.jar&quot;], :children ()}, com.taoensso/truss {:mvn/version &quot;1.6.0&quot;, :deps/manifest :mvn, :dependents [com.taoensso/encore], :paths [&quot;C:\\Users\\MartinRoberts\\.m2\\repository\\com\\taoensso\\truss\\1.6.0\\truss-1.6.0.jar&quot;], :children ()}, org.clojure/google-closure-library-third-party {:mvn/version &quot;0.0-20160609-f42b4a24&quot;, :deps/manifest :mvn, :dependents [org.clojure/google-closure-library], :paths [&quot;C:\\Users\\MartinRoberts\\.m2\\repository\\org\\clojure\\google-closure-library-third-party\\0.0-20160609-f42b4a24\\google-closure-library-third-party-0.0-20160609-f42b4a24.jar&quot;], :children ()}, hiccup/hiccup {:mvn/version &quot;2.0.0-alpha2&quot;, :deps/manifest :mvn, :paths [&quot;C:\\Users\\MartinRoberts\\.m2\\repository\\hiccup\\hiccup\\2.0.0-alpha2\\hiccup-2.0.0-alpha2.jar&quot;], :children ()}, riddley/riddley {:mvn/version &quot;0.1.12&quot;, :deps/manifest :mvn, :dependents [com.rpl/specter], :paths [&quot;C:\\Users\\MartinRoberts\\.m2\\repository\\riddley\\riddley\\0.1.12\\riddley-0.1.12.jar&quot;], :children ()}, com.google.javascript/closure-compiler-externs {:mvn/version &quot;v20160911&quot;, :deps/manifest :mvn, :dependents [com.google.javascript/closure-compiler-unshaded], :paths [&quot;C:\\Users\\MartinRoberts\\.m2\\repository\\com\\google\\javascript\\closure-compiler-externs\\v20160911\\closure-compiler-externs-v20160911.jar&quot;], :children ()}, commons-logging/commons-logging {:mvn/version &quot;1.2&quot;, :deps/manifest :mvn, :dependents [org.apache.httpcomponents/httpclient], :paths [&quot;C:\\Users\\MartinRoberts\\.m2\\repository\\commons-logging\\commons-logging\\1.2\\commons-logging-1.2.jar&quot;], :children ()}, com.google.guava/guava {:mvn/version &quot;19.0&quot;, :deps/manifest :mvn, :dependents [com.google.javascript/closure-compiler-unshaded], :paths [&quot;C:\\Users\\MartinRoberts\\.m2\\repository\\com\\google\\guava\\guava\\19.0\\guava-19.0.jar&quot;], :children ()}, viebel/codox-klipse-theme {:mvn/version &quot;0.0.1&quot;, :deps/manifest :mvn, :dependents [hickory/hickory], :paths [&quot;C:\\Users\\MartinRoberts\\.m2\\repository\\viebel\\codox-klipse-theme\\0.0.1\\codox-klipse-theme-0.0.1.jar&quot;], :children ()}, net.minidev/json-smart {:mvn/version &quot;2.3&quot;, :deps/manifest :mvn, :dependents [juxt/crux-http-client], :paths [&quot;C:\\Users\\MartinRoberts\\.m2\\repository\\net\\minidev\\json-smart\\2.3\\json-smart-2.3.jar&quot;], :children (net.minidev/accessors-smart)}, quoin/quoin {:mvn/version &quot;0.1.2&quot;, :exclusions #{org.clojure/clojure}, :deps/manifest :mvn, :dependents [hickory/hickory], :paths [&quot;C:\\Users\\MartinRoberts\\.m2\\repository\\quoin\\quoin\\0.1.2\\quoin-0.1.2.jar&quot;], :children ()}, args4j/args4j {:mvn/version &quot;2.0.26&quot;, :deps/manifest :mvn, :dependents [com.google.javascript/closure-compiler-unshaded], :paths [&quot;C:\\Users\\MartinRoberts\\.m2\\repository\\args4j\\args4j\\2.0.26\\args4j-2.0.26.jar&quot;], :children ()}, org.apache.httpcomponents/httpclient {:mvn/version &quot;4.5.10&quot;, :exclusions #{org.clojure/clojure}, :deps/manifest :mvn, :dependents [clj-http/clj-http], :paths [&quot;C:\\Users\\MartinRoberts\\.m2\\repository\\org\\apache\\httpcomponents\\httpclient\\4.5.10\\httpclient-4.5.10.jar&quot;], :children (commons-logging/commons-logging)}, hickory/hickory {:mvn/version &quot;0.7.1&quot;, :deps/manifest :mvn, :paths [&quot;C:\\Users\\MartinRoberts\\.m2\\repository\\hickory\\hickory\\0.7.1\\hickory-0.7.1.jar&quot;], :children (org.clojure/clojurescript viebel/codox-klipse-theme quoin/quoin org.jsoup/jsoup)}, org.clojure/tools.reader {:mvn/version &quot;1.3.4&quot;, :deps/manifest :mvn, :dependents [juxt/crux-core], :paths [&quot;C:\\Users\\MartinRoberts\\.m2\\repository\\org\\clojure\\tools.reader\\1.3.4\\tools.reader-1.3.4.jar&quot;], :children ()}, org.jsoup/jsoup {:mvn/version &quot;1.9.2&quot;, :deps/manifest :mvn, :dependents [hickory/hickory], :paths [&quot;C:\\Users\\MartinRoberts\\.m2\\repository\\org\\jsoup\\jsoup\\1.9.2\\jsoup-1.9.2.jar&quot;], :children ()}, com.taoensso/nippy {:mvn/version &quot;3.1.1&quot;, :deps/manifest :mvn, :dependents [juxt/crux-core], :paths [&quot;C:\\Users\\MartinRoberts\\.m2\\repository\\com\\taoensso\\nippy\\3.1.1\\nippy-3.1.1.jar&quot;], :children (org.lz4/lz4-java org.tukaani/xz com.taoensso/encore org.iq80.snappy/snappy)}, potemkin/potemkin {:mvn/version &quot;0.4.5&quot;, :exclusions #{org.clojure/clojure}, :deps/manifest :mvn, :dependents [clj-http/clj-http], :paths [&quot;C:\\Users\\MartinRoberts\\.m2\\repository\\potemkin\\potemkin\\0.4.5\\potemkin-0.4.5.jar&quot;], :children (clj-tuple/clj-tuple)}, com.rpl/specter {:mvn/version &quot;1.1.3&quot;, :deps/manifest :mvn, :paths [&quot;C:\\Users\\MartinRoberts\\.m2\\repository\\com\\rpl\\specter\\1.1.3\\specter-1.1.3.jar&quot;], :children (riddley/riddley)}, org.slf4j/slf4j-api {:mvn/version &quot;1.7.30&quot;, :deps/manifest :mvn, :dependents [juxt/crux-core], :paths [&quot;C:\\Users\\MartinRoberts\\.m2\\repository\\org\\slf4j\\slf4j-api\\1.7.30\\slf4j-api-1.7.30.jar&quot;], :children ()}, com.google.javascript/closure-compiler-unshaded {:mvn/version &quot;v20160911&quot;, :deps/manifest :mvn, :dependents [org.clojure/clojurescript], :paths [&quot;C:\\Users\\MartinRoberts\\.m2\\repository\\com\\google\\javascript\\closure-compiler-unshaded\\v20160911\\closure-compiler-unshaded-v20160911.jar&quot;], :children (com.google.jsinterop/jsinterop-annotations com.google.javascript/closure-compiler-externs com.google.guava/guava args4j/args4j com.google.protobuf/protobuf-java com.google.code.findbugs/jsr305 com.google.code.gson/gson)}, juxt/crux-core {:mvn/version &quot;20.12-1.13.0-beta&quot;, :deps/manifest :mvn, :dependents [juxt/crux-http-client], :paths [&quot;C:\\Users\\MartinRoberts\\.m2\\repository\\juxt\\crux-core\\20.12-1.13.0-beta\\crux-core-20.12-1.13.0-beta.jar&quot;], :children (org.clojure/tools.logging edn-query-language/eql org.agrona/agrona org.clojure/tools.reader com.taoensso/nippy org.slf4j/slf4j-api com.stuartsierra/dependency)}, com.google.protobuf/protobuf-java {:mvn/version &quot;2.5.0&quot;, :deps/manifest :mvn, :dependents [com.google.javascript/closure-compiler-unshaded], :paths [&quot;C:\\Users\\MartinRoberts\\.m2\\repository\\com\\google\\protobuf\\protobuf-java\\2.5.0\\protobuf-java-2.5.0.jar&quot;], :children ()}, com.stuartsierra/dependency {:mvn/version &quot;0.2.0&quot;, :deps/manifest :mvn, :dependents [juxt/crux-core], :paths [&quot;C:\\Users\\MartinRoberts\\.m2\\repository\\com\\stuartsierra\\dependency\\0.2.0\\dependency-0.2.0.jar&quot;], :children ()}, net.minidev/accessors-smart {:mvn/version &quot;1.2&quot;, :deps/manifest :mvn, :dependents [net.minidev/json-smart], :paths [&quot;C:\\Users\\MartinRoberts\\.m2\\repository\\net\\minidev\\accessors-smart\\1.2\\accessors-smart-1.2.jar&quot;], :children (org.ow2.asm/asm)}, org.apache.httpcomponents/httpmime {:mvn/version &quot;4.5.10&quot;, :exclusions #{org.clojure/clojure}, :deps/manifest :mvn, :dependents [clj-http/clj-http], :paths [&quot;C:\\Users\\MartinRoberts\\.m2\\repository\\org\\apache\\httpcomponents\\httpmime\\4.5.10\\httpmime-4.5.10.jar&quot;], :children ()}, com.google.code.findbugs/jsr305 {:mvn/version &quot;1.3.9&quot;, :deps/manifest :mvn, :dependents [com.google.javascript/closure-compiler-unshaded], :paths [&quot;C:\\Users\\MartinRoberts\\.m2\\repository\\com\\google\\code\\findbugs\\jsr305\\1.3.9\\jsr305-1.3.9.jar&quot;], :children ()}, com.github.stephenc.jcip/jcip-annotations {:mvn/version &quot;1.0-1&quot;, :deps/manifest :mvn, :dependents [com.nimbusds/nimbus-jose-jwt], :paths [&quot;C:\\Users\\MartinRoberts\\.m2\\repository\\com\\github\\stephenc\\jcip\\jcip-annotations\\1.0-1\\jcip-annotations-1.0-1.jar&quot;], :children ()}, com.google.code.gson/gson {:mvn/version &quot;2.2.4&quot;, :deps/manifest :mvn, :dependents [com.google.javascript/closure-compiler-unshaded], :paths [&quot;C:\\Users\\MartinRoberts\\.m2\\repository\\com\\google\\code\\gson\\gson\\2.2.4\\gson-2.2.4.jar&quot;], :children ()}}, :test-paths [&quot;test&quot;]}" />
              <option name="hash" value="a2cbd2cac4768c9a7f6354ff7ed57ae4" />
            </ModuleDetails>
          </value>
        </entry>
      </map>
    </option>
  </component>
  <component name="FileTemplateManagerImpl">
    <option name="RECENT_TEMPLATES">
      <list>
        <option value="Clojure Namespace" />
      </list>
    </option>
  </component>
  <component name="Git.Settings">
    <option name="RECENT_GIT_ROOT_PATH" value="$PROJECT_DIR$" />
  </component>
  <component name="ProjectId" id="1bz5Y2j2j21xIBm3ZWy9ZqBFJOE" />
  <component name="ProjectViewState">
    <option name="hideEmptyMiddlePackages" value="true" />
    <option name="showLibraryContents" value="true" />
  </component>
  <component name="PropertiesComponent">
    <property name="ASKED_ADD_EXTERNAL_FILES" value="true" />
    <property name="GoToNamespace.includeLibraries" value="false" />
    <property name="RunOnceActivity.OpenProjectViewOnStart" value="true" />
    <property name="RunOnceActivity.ShowReadmeOnStart" value="true" />
    <property name="cursive.last.file.extension.C\:/Users/MartinRoberts/private_projects/split-text/src" value="clj" />
    <property name="last_opened_file_path" value="$PROJECT_DIR$" />
    <property name="project.structure.last.edited" value="Global Libraries" />
    <property name="project.structure.proportion" value="0.0" />
    <property name="project.structure.side.proportion" value="0.2" />
    <property name="run.code.analysis.last.selected.profile" value="pProject Default" />
    <property name="settings.editor.selected.configurable" value="preferences.keymap" />
  </component>
  <component name="RecentsManager">
    <key name="CopyFile.RECENT_KEYS">
      <recent name="C:\Users\MartinRoberts\private_projects\split-text" />
    </key>
  </component>
  <component name="ReplState" timestamp="1611490150257">{:repl-history {:ide [], :local [{:command &quot;(make-entry  1 \&quot;himlit\&quot; \&quot;Revelation\&quot;(nth  mdcproc 200))&quot;, :offset 55, :ns &quot;split-text.core&quot;} {:command &quot;(make-entry  1 \&quot;himlit\&quot; \&quot;Revelation\&quot;(nth  mdcproc 204))&quot;, :offset 55, :ns &quot;split-text.core&quot;} {:command &quot;(make-entry  1 \&quot;himlit\&quot; \&quot;Revelation\&quot;(nth  mdcproc 209))&quot;, :offset 55, :ns &quot;split-text.core&quot;} {:command &quot;(make-entry  1 \&quot;himlit\&quot; \&quot;Revelation\&quot;(nth  mdcproc 210))&quot;, :offset 55, :ns &quot;split-text.core&quot;} {:command &quot;(nth  mdcproc 210)&quot;, :offset 18, :ns &quot;split-text.core&quot;} {:command &quot;(map #(make-entry \&quot;Himlit\&quot; \&quot;Revelation\&quot; %) mdcproc)&quot;, :offset 51, :ns &quot;split-text.core&quot;} {:command &quot;(map #(assoc {} :crux.tx/put (make-entry \&quot;Himlit\&quot; \&quot;Revelation\&quot; %)) mdcproc)&quot;, :offset 75, :ns &quot;split-text.core&quot;} {:command &quot;(map #(vec(assoc {} :crux.tx/put (make-entry \&quot;Himlit\&quot; \&quot;Revelation\&quot; %))) mdcproc)&quot;, :offset 80, :ns &quot;split-text.core&quot;} {:command &quot;(vec (map #(assoc {} :crux.tx/put (make-entry \&quot;Himlit\&quot; \&quot;Revelation\&quot; %)) mdcproc))&quot;, :offset 81, :ns &quot;split-text.core&quot;} {:command &quot; (map #(into [] :crux.tx/put (make-entry \&quot;Himlit\&quot; \&quot;Revelation\&quot; %)) mdcproc)&quot;, :offset 75, :ns &quot;split-text.core&quot;} {:command &quot; (map #(into [] :crux.tx/put (make-entry \&quot;Himlit\&quot; \&quot;Revelation\&quot; %)) (first mdcproc))&quot;, :offset 83, :ns &quot;split-text.core&quot;} {:command &quot;(into [] :crux.tx/put (make-entry \&quot;Himlit\&quot; \&quot;Revelation\&quot; %)) (first mdcproc)&quot;, :offset 59} {:command &quot; (map [ :crux.tx/put #(make-entry \&quot;Himlit\&quot; \&quot;Revelation\&quot; %)] (first mdcproc))&quot;, :offset 76, :ns &quot;split-text.core&quot;} {:command &quot; (map #(make-entry \&quot;Himlit\&quot; \&quot;Revelation\&quot; %) mdcproc)&quot;, :offset 52, :ns &quot;split-text.core&quot;} {:command &quot; (map #(vec :crux.tx/put %) (map (fn [x] make-entry \&quot;Himlit\&quot; \&quot;Revelation\&quot; x) mdcproc))&quot;, :offset 86, :ns &quot;split-text.core&quot;} {:command &quot; (map #(into [] :crux.tx/put %) (map (fn [x] make-entry \&quot;Himlit\&quot; \&quot;Revelation\&quot; x) mdcproc))&quot;, :offset 90, :ns &quot;split-text.core&quot;} {:command &quot; (map #(conj [] :crux.tx/put %) (map (fn [x] make-entry \&quot;Himlit\&quot; \&quot;Revelation\&quot; x) mdcproc))&quot;, :offset 90, :ns &quot;split-text.core&quot;} {:command &quot; (map #(conj [] :crux.tx/put %) (map (fn [x] (make-entry \&quot;Himlit\&quot; \&quot;Revelation\&quot; x)) mdcproc))&quot;, :offset 92, :ns &quot;split-text.core&quot;} {:command &quot;(def crux-db {:himlit          {:crux/module 'crux.rocksdb/-&gt;kv-store\n                                :db-dir      (io/file \&quot;resources/himtlit-rocksdb\&quot;)}\n              :crux/tx-log         {:kv-store :himlit}\n              :crux/document-store {:kv-store :himlit}})&quot;, :offset 265, :ns &quot;split-text.db&quot;} {:command &quot;(.close conn)&quot;, :offset 13, :ns &quot;split-text.core&quot;} {:command &quot;(def crux-db {:himlit          {:crux/module 'crux.rocksdb/-&gt;kv-store\n                                :db-dir      (io/file \&quot;data/himtlit-rocksdb\&quot;)}\n              :crux/tx-log         {:kv-store :himlit}\n              :crux/document-store {:kv-store :himlit}})&quot;, :offset 260, :ns &quot;split-text.db&quot;} {:command &quot;(def crux-db {:crux.rocksdb/block-cache {:crux/module 'crux.rocksdb/-&gt;lru-block-cache\n                                         :cache-size (* 512 1024 1024)}\n              :himlit          {:crux/module 'crux.rocksdb/-&gt;kv-store\n                                :block-cache :crux.rocksdb/block-cache\n                                :db-dir      (io/file \&quot;data/himtlit-rocksdb\&quot;)}\n              :crux/tx-log         {:kv-store :himlit}\n              :crux/document-store {:kv-store :himlit}})&quot;, :offset 489, :ns &quot;split-text.db&quot;} {:command &quot;(defonce conn (crux/start-node crux-db))&quot;, :offset 40, :ns &quot;split-text.db&quot;} {:command &quot;(crux/entity (crux/db split-text.db/conn) :1)&quot;, :offset 45, :ns &quot;split-text.core&quot;} {:command &quot;(crux/entity (crux/db split-text.db/conn) (keyword \&quot;web\&quot; 1))&quot;, :offset 60, :ns &quot;split-text.core&quot;} {:command &quot;(crux/q\n(crux/db split-text.db/conn\n  '{:find [p1]\n    :where [[p1 :chapter n]]}))\n&quot;, :offset 82, :ns &quot;split-text.core&quot;} {:command &quot;(.close split-text.db/conn)&quot;, :offset 27, :ns &quot;split-text.core&quot;} {:command &quot;(crux/q\n(crux/db split-text.db/conn)\n  '{:find [p1]\n    :where [[p1 :chapter n]]})\n&quot;, :offset 82, :ns &quot;split-text.core&quot;} {:command &quot;(def cli-options\n  ;; An option with a required argument\n  [[\&quot;-f\&quot; \&quot;--file FILENAME\&quot; \&quot;Filename without path or extension\&quot;]\n   [\&quot;-d\&quot; \&quot;--directory DIRECTORY\&quot; \&quot;Directory that contains the working folders\&quot;]\n   [\&quot;-t\&quot; \&quot;--title TITLE\&quot; \&quot;The Title of the document\&quot;]\n   [\&quot;-x\&quot; \&quot;--docx\&quot; \&quot;convert to docx\&quot; :default false]\n   [\&quot;-m\&quot; \&quot;--markdown\&quot;  \&quot;convert to markdown\&quot; :default false]\n\n   ; :validate [#(str/ends-with? % \&quot;.doc\&quot;) \&quot;Must be a Word .doc file\&quot;]]\n   ;; A non-idempotent option (:default is applied first)\n   [\&quot;-o\&quot; \&quot;--output OUTPUT\&quot;  \&quot;Output format - options html or pdf\&quot;\n    :default \&quot;html\&quot;\n    :validate [#(contains? #{\&quot;html\&quot; \&quot;pdf\&quot;} % ) \&quot;Must be either html or pdf\&quot;]]\n   ; Prior to 0.4.1, you would have to use:\n   ;; :assoc-fn (fn [m k _] (update-in m [k] inc))\n   ;; A boolean option defaulting to nil\n   [\&quot;-h\&quot; \&quot;--help\&quot;]])&quot;, :offset 820, :ns &quot;split-text.core&quot;} {:command &quot;(def dir \&quot;C:\\\\Users\\\\MartinRoberts\\\\Sync\\\\NT\\\\Revelation\&quot;)&quot;, :offset 58, :ns &quot;split-text.core&quot;} {:command &quot;(def filein \&quot;2020-Revelation-Final\&quot;)&quot;, :offset 36, :ns &quot;split-text.core&quot;} {:command &quot;(def mdf (construct-filename dir  intermediate  filein \&quot;.in.md\&quot;))&quot;, :offset 65, :ns &quot;split-text.core&quot;} {:command &quot;(def mdcin (read-markdown mdf))&quot;, :offset 31, :ns &quot;split-text.core&quot;} {:command &quot;(def mdcproc (process-markdown mdcin))&quot;, :offset 38, :ns &quot;split-text.core&quot;} {:command &quot;(add_entries conn \&quot;Himlit\&quot; \&quot;Revelation\&quot; mdcproc)&quot;, :offset 48, :ns &quot;split-text.core&quot;} {:command &quot;(ns split-text.core\n  (:require [split-text.config :refer [directory original intermediate pre-published stylesheet]]\n    [split-text.io :refer :all]\n    ;[split-text.meta :refer :all]\n    ;[split-text.inwards :refer :all]\n    ;[split-text.outwards :refer :all]\n    [split-text.markdown :refer :all]\n    [split-text.db :refer :all]\n    [clojure.string :as str]\n    [com.rpl.specter :refer :all]\n    [hiccup2.core :as h]\n    [clojure.tools.cli :as cli]\n    [clojure.java.shell :as sh]\n    [crux.api :as crux])\n  (:gen-class))&quot;, :offset 524, :ns &quot;user&quot;} {:command &quot;(while (= 1 1))&quot;, :offset 15, :ns &quot;split-text.core&quot;} {:command &quot;(crux/q\n    (crux/db conn)\n    '{:find [chpt]\n      :where [[p1 :chapter chpt]]})&quot;, :offset 81, :ns &quot;split-text.core&quot;} {:command &quot;(crux/q\n    (crux/db conn)\n    '{:find [chpt]\n      :where [[p1 :source chpt]]})&quot;, :offset 80, :ns &quot;split-text.core&quot;} {:command &quot;(ns split-text.core\n  (:require [split-text.config :refer [directory original intermediate pre-published stylesheet]]\n    [split-text.io :refer :all]\n    ;[split-text.meta :refer :all]\n    ;[split-text.inwards :refer :all]\n    ;[split-text.outwards :refer :all]\n    [split-text.markdown :refer :all]\n    [split-text.db :refer :all]\n    [clojure.string :as str]\n    [com.rpl.specter :refer :all]\n    [hiccup2.core :as h]\n    [clojure.tools.cli :as cli]\n    [clojure.java.shell :as sh]\n    [crux.api :as crux]\n    [java.io :as io])\n  (:gen-class))&quot;, :offset 545, :ns &quot;split-text.core&quot;} {:command &quot;(clojure.java.io/file mdf)&quot;, :offset 26, :ns &quot;split-text.core&quot;} {:command &quot;(def docf (construct-filename directory  original  file \&quot;.doc\&quot;))&quot;, :offset 64, :ns &quot;split-text.core&quot;} {:command &quot;(def docf (construct-filename directory  original  filein \&quot;.doc\&quot;))&quot;, :offset 66, :ns &quot;split-text.core&quot;} {:command &quot;(def docf (construct-filename dir  original  filein \&quot;.doc\&quot;))&quot;, :offset 60, :ns &quot;split-text.core&quot;} {:command &quot;docf&quot;, :offset 4, :ns &quot;split-text.core&quot;} {:command &quot;(&gt; (.lastModified(clojure.java.io/file docf)) (.lastModified(clojure.java.io/file mdf)))&quot;, :offset 88, :ns &quot;split-text.core&quot;} {:command &quot;(.lastModified(clojure.java.io/file docf))&quot;, :offset 42, :ns &quot;split-text.core&quot;} {:command &quot;(.lastModified(clojure.java.io/file mdf))&quot;, :offset 41, :ns &quot;split-text.core&quot;} {:command &quot;(def docxf (construct-filename dir  intermediate  filein \&quot;.docx\&quot;))&quot;, :offset 66, :ns &quot;split-text.core&quot;} {:command &quot;(.lastModified(clojure.java.io/file docxf))&quot;, :offset 43, :ns &quot;split-text.core&quot;} {:command &quot;(&gt; (.lastModified(clojure.java.io/file docxf)) (.lastModified(clojure.java.io/file mdf)))&quot;, :offset 89, :ns &quot;split-text.core&quot;} {:command &quot;(&gt; (.lastModified(clojure.java.io/file docf)) (.lastModified(clojure.java.io/file docxf)))&quot;, :offset 90, :ns &quot;split-text.core&quot;} {:command &quot;(def file-epoch (.lastModified (partial clojure.java.io/file)))&quot;, :offset 63, :ns &quot;split-text.io&quot;} {:command &quot;(def get-file (partial clojure.java.io/file))&quot;, :offset 45, :ns &quot;split-text.io&quot;} {:command &quot;(def file-epoch (.lastModified (get-file)))&quot;, :offset 43, :ns &quot;split-text.io&quot;} {:command &quot;(def file-epoch (comp .lastModified get-file))&quot;, :offset 46, :ns &quot;split-text.io&quot;} {:command &quot;(def file-epoch (comp (.lastModified) (get-file)))&quot;, :offset 50, :ns &quot;split-text.io&quot;} {:command &quot;(file-epoch docx)&quot;, :offset 17, :ns &quot;split-text.core&quot;} {:command &quot;(file-epoch docxf)&quot;, :offset 18, :ns &quot;split-text.core&quot;} {:command &quot;(def file-epoch (partial .lastMadified))&quot;, :offset 40, :ns &quot;split-text.io&quot;} {:command &quot;(def file-epoch (partial .lastModified))&quot;, :offset 40, :ns &quot;split-text.io&quot;} {:command &quot;(defn file-epoch [fn]\n   (.lastModified (get-file fn)))&quot;, :offset 55, :ns &quot;split-text.io&quot;} {:command &quot;(def lastModified (partial file-epoch))&quot;, :offset 39, :ns &quot;split-text.io&quot;} {:command &quot;(defn handle-document [style options]\n  (tap&gt; (str options))\n  (let [{:keys [output file title directory]} options\n        ;filestub (first (str/split file #\&quot;\\.\&quot;))\n        suffix (cond (= style \&quot;bo\&quot;)  \&quot;uniglot\&quot;\n                     (= style \&quot;eng\&quot;)  \&quot;english\&quot;\n                     (= style \&quot;bo-nav\&quot;)  \&quot;uniglot-nav\&quot;\n                     (= style \&quot;boeng\&quot;) \&quot;diglot-interlinear\&quot;\n                     (= style \&quot;boeng-nav\&quot;) \&quot;diglot-interlinear-nav\&quot;\n                     (= style \&quot;boeng-cols\&quot;) \&quot;diglot-side-by-side\&quot;)\n\n        docfile (construct-filename directory  original  file \&quot;.doc\&quot;)\n        docxfile (construct-filename directory  intermediate  file \&quot;.docx\&quot;)\n        markdownfile (construct-filename directory  intermediate  file \&quot;.in.md\&quot;)\n        intermediatefilename (construct-filename directory  intermediate  file \&quot;.out.md\&quot;)\n        outputfile (construct-filename directory  pre-published file (str \&quot;-\&quot; suffix \&quot;.\&quot; output))]\n        ;one (println \&quot;doc2docx.bat \&quot; docfile \&quot; \&quot; docxfile)\n       ;(if (:docx options) (sh/sh \&quot;doc2docx.bat\&quot; docfile docxfile))\n        (if (&gt; (lastModified docfile) (lastModified docxfile)) (sh/sh \&quot;doc2docx.bat\&quot; docfile docxfile))\n        ;two (println \&quot;docx2md.bat \&quot; docxfile \&quot; \&quot; markdownfile)\n       (if (&gt; (lastModified docxfile) (lastModified markdownfile)) (sh/sh \&quot;docx2md.bat\&quot; docxfile markdownfile))\n\n    (if (not= exit 0)\n      (let [md (process-markdown-file markdownfile)]\n        (do (case style\n              \&quot;bo\&quot; (output-md (output-bo-markdown md) intermediatefilename)\n              \&quot;eng\&quot; (output-md (output-eng-markdown md) intermediatefilename)\n              \&quot;bo-nav\&quot; (output-md-with-navigation (output-bo-markdown md) md style intermediatefilename)\n              \&quot;boeng\&quot; (output-md (output-boeng-markdown md) intermediatefilename)\n              \&quot;boeng-nav\&quot; (output-md-with-navigation (output-boeng-markdown md) md style intermediatefilename)\n              \&quot;boeng-cols\&quot; (output-md (output-boeng-interlinear md) intermediatefilename))\n            (println \&quot;md2out.bat \&quot; intermediatefilename \&quot; \&quot; outputfile \&quot; \&quot; title \&quot; \&quot; stylesheet)\n            (sh/sh \&quot;md2out.bat\&quot; intermediatefilename outputfile  title stylesheet))))))&quot;, :offset 2162, :ns &quot;split-text.core&quot;} {:command &quot;(defn handle-document [style options]\n  (tap&gt; (str options))\n  (let [{:keys [output file title directory]} options\n        ;filestub (first (str/split file #\&quot;\\.\&quot;))\n        suffix (cond (= style \&quot;bo\&quot;)  \&quot;uniglot\&quot;\n                     (= style \&quot;eng\&quot;)  \&quot;english\&quot;\n                     (= style \&quot;bo-nav\&quot;)  \&quot;uniglot-nav\&quot;\n                     (= style \&quot;boeng\&quot;) \&quot;diglot-interlinear\&quot;\n                     (= style \&quot;boeng-nav\&quot;) \&quot;diglot-interlinear-nav\&quot;\n                     (= style \&quot;boeng-cols\&quot;) \&quot;diglot-side-by-side\&quot;)\n\n        docfile (construct-filename directory  original  file \&quot;.doc\&quot;)\n        docxfile (construct-filename directory  intermediate  file \&quot;.docx\&quot;)\n        markdownfile (construct-filename directory  intermediate  file \&quot;.in.md\&quot;)\n        intermediatefilename (construct-filename directory  intermediate  file \&quot;.out.md\&quot;)\n        outputfile (construct-filename directory  pre-published file (str \&quot;-\&quot; suffix \&quot;.\&quot; output))]\n        ;one (println \&quot;doc2docx.bat \&quot; docfile \&quot; \&quot; docxfile)\n       ;(if (:docx options) (sh/sh \&quot;doc2docx.bat\&quot; docfile docxfile))\n        (if (&gt; (lastModified docfile) (lastModified docxfile)) \n          (do (println \&quot;Updating docx File\&quot;)\n              (sh/sh \&quot;doc2docx.bat\&quot; docfile docxfile))\n        ;two (println \&quot;docx2md.bat \&quot; docxfile \&quot; \&quot; markdownfile)\n       (if (&gt; (lastModified docxfile) (lastModified markdownfile)) \n              (do (println \&quot;Updating Markdown file\&quot;)\n                  (sh/sh \&quot;docx2md.bat\&quot; docxfile markdownfile)))\n\n    (if (not= exit 0)\n      (let [md (process-markdown-file markdownfile)]\n        (do (case style\n              \&quot;bo\&quot; (output-md (output-bo-markdown md) intermediatefilename)\n              \&quot;eng\&quot; (output-md (output-eng-markdown md) intermediatefilename)\n              \&quot;bo-nav\&quot; (output-md-with-navigation (output-bo-markdown md) md style intermediatefilename)\n              \&quot;boeng\&quot; (output-md (output-boeng-markdown md) intermediatefilename)\n              \&quot;boeng-nav\&quot; (output-md-with-navigation (output-boeng-markdown md) md style intermediatefilename)\n              \&quot;boeng-cols\&quot; (output-md (output-boeng-interlinear md) intermediatefilename))\n            (println \&quot;md2out.bat \&quot; intermediatefilename \&quot; \&quot; outputfile \&quot; \&quot; title \&quot; \&quot; stylesheet)\n            (sh/sh \&quot;md2out.bat\&quot; intermediatefilename outputfile  title stylesheet)))))))&quot;, :offset 2296, :ns &quot;split-text.core&quot;} {:command &quot;(defn handle-document [style options]\n  (tap&gt; (str options))\n  (let [{:keys [output file title directory]} options\n        ;filestub (first (str/split file #\&quot;\\.\&quot;))\n        suffix (cond (= style \&quot;bo\&quot;)  \&quot;uniglot\&quot;\n                     (= style \&quot;eng\&quot;)  \&quot;english\&quot;\n                     (= style \&quot;bo-nav\&quot;)  \&quot;uniglot-nav\&quot;\n                     (= style \&quot;boeng\&quot;) \&quot;diglot-interlinear\&quot;\n                     (= style \&quot;boeng-nav\&quot;) \&quot;diglot-interlinear-nav\&quot;\n                     (= style \&quot;boeng-cols\&quot;) \&quot;diglot-side-by-side\&quot;)\n\n        docfile (construct-filename directory  original  file \&quot;.doc\&quot;)\n        docxfile (construct-filename directory  intermediate  file \&quot;.docx\&quot;)\n        markdownfile (construct-filename directory  intermediate  file \&quot;.in.md\&quot;)\n        intermediatefilename (construct-filename directory  intermediate  file \&quot;.out.md\&quot;)\n        outputfile (construct-filename directory  pre-published file (str \&quot;-\&quot; suffix \&quot;.\&quot; output))]\n        ;one (println \&quot;doc2docx.bat \&quot; docfile \&quot; \&quot; docxfile)\n       ;(if (:docx options) (sh/sh \&quot;doc2docx.bat\&quot; docfile docxfile))\n        (if (&gt; (lastModified docfile) (lastModified docxfile))\n          (do (println \&quot;Updating docx File\&quot;)\n              (sh/sh \&quot;doc2docx.bat\&quot; docfile docxfile)))\n        ;two (println \&quot;docx2md.bat \&quot; docxfile \&quot; \&quot; markdownfile)\n       (if (&gt; (lastModified docxfile) (lastModified markdownfile))\n              (do (println \&quot;Updating Markdown file\&quot;)\n                  (sh/sh \&quot;docx2md.bat\&quot; docxfile markdownfile)))\n\n    (if (not= exit 0)\n      (let [md (process-markdown-file markdownfile)]\n        (do (case style\n              \&quot;bo\&quot; (output-md (output-bo-markdown md) intermediatefilename)\n              \&quot;eng\&quot; (output-md (output-eng-markdown md) intermediatefilename)\n              \&quot;bo-nav\&quot; (output-md-with-navigation (output-bo-markdown md) md style intermediatefilename)\n              \&quot;boeng\&quot; (output-md (output-boeng-markdown md) intermediatefilename)\n              \&quot;boeng-nav\&quot; (output-md-with-navigation (output-boeng-markdown md) md style intermediatefilename)\n              \&quot;boeng-cols\&quot; (output-md (output-boeng-interlinear md) intermediatefilename))\n            (println \&quot;md2out.bat \&quot; intermediatefilename \&quot; \&quot; outputfile \&quot; \&quot; title \&quot; \&quot; stylesheet)\n            (sh/sh \&quot;md2out.bat\&quot; intermediatefilename outputfile  title stylesheet))))))&quot;, :offset 2294, :ns &quot;split-text.core&quot;} {:command &quot;(defn handle-document [style options]\n  (tap&gt; (str options))\n  (let [{:keys [output file title directory]} options\n        ;filestub (first (str/split file #\&quot;\\.\&quot;))\n        suffix (cond (= style \&quot;bo\&quot;)  \&quot;uniglot\&quot;\n                     (= style \&quot;eng\&quot;)  \&quot;english\&quot;\n                     (= style \&quot;bo-nav\&quot;)  \&quot;uniglot-nav\&quot;\n                     (= style \&quot;boeng\&quot;) \&quot;diglot-interlinear\&quot;\n                     (= style \&quot;boeng-nav\&quot;) \&quot;diglot-interlinear-nav\&quot;\n                     (= style \&quot;boeng-cols\&quot;) \&quot;diglot-side-by-side\&quot;)\n\n        docfile (construct-filename directory  original  file \&quot;.doc\&quot;)\n        docxfile (construct-filename directory  intermediate  file \&quot;.docx\&quot;)\n        markdownfile (construct-filename directory  intermediate  file \&quot;.in.md\&quot;)\n        intermediatefilename (construct-filename directory  intermediate  file \&quot;.out.md\&quot;)\n        outputfile (construct-filename directory  pre-published file (str \&quot;-\&quot; suffix \&quot;.\&quot; output))\n        ;one (println \&quot;doc2docx.bat \&quot; docfile \&quot; \&quot; docxfile)\n       ;(if (:docx options) (sh/sh \&quot;doc2docx.bat\&quot; docfile docxfile))\n        doc2docx (if (&gt; (lastModified docfile) (lastModified docxfile))\n          (do (println \&quot;Updating docx File\&quot;)\n              (sh/sh \&quot;doc2docx.bat\&quot; docfile docxfile)))\n        ;two (println \&quot;docx2md.bat \&quot; docxfile \&quot; \&quot; markdownfile)\n        docx2md (if (&gt; (lastModified docxfile) (lastModified markdownfile))\n              (do (println \&quot;Updating Markdown file\&quot;)\n                  (sh/sh \&quot;docx2md.bat\&quot; docxfile markdownfile)))]\n\n    (if (not= exit 0)\n      (let [md (process-markdown-file markdownfile)]\n        (do (case style\n              \&quot;bo\&quot; (output-md (output-bo-markdown md) intermediatefilename)\n              \&quot;eng\&quot; (output-md (output-eng-markdown md) intermediatefilename)\n              \&quot;bo-nav\&quot; (output-md-with-navigation (output-bo-markdown md) md style intermediatefilename)\n              \&quot;boeng\&quot; (output-md (output-boeng-markdown md) intermediatefilename)\n              \&quot;boeng-nav\&quot; (output-md-with-navigation (output-boeng-markdown md) md style intermediatefilename)\n              \&quot;boeng-cols\&quot; (output-md (output-boeng-interlinear md) intermediatefilename))\n            (println \&quot;md2out.bat \&quot; intermediatefilename \&quot; \&quot; outputfile \&quot; \&quot; title \&quot; \&quot; stylesheet)\n            (sh/sh \&quot;md2out.bat\&quot; intermediatefilename outputfile  title stylesheet))))))&quot;, :offset 2312, :ns &quot;split-text.core&quot;} {:command &quot;(defn handle-document [style options]\n  (tap&gt; (str options))\n  (let [{:keys [output file title directory]} options\n        ;filestub (first (str/split file #\&quot;\\.\&quot;))\n        suffix (cond (= style \&quot;bo\&quot;)  \&quot;uniglot\&quot;\n                     (= style \&quot;eng\&quot;)  \&quot;english\&quot;\n                     (= style \&quot;bo-nav\&quot;)  \&quot;uniglot-nav\&quot;\n                     (= style \&quot;boeng\&quot;) \&quot;diglot-interlinear\&quot;\n                     (= style \&quot;boeng-nav\&quot;) \&quot;diglot-interlinear-nav\&quot;\n                     (= style \&quot;boeng-cols\&quot;) \&quot;diglot-side-by-side\&quot;)\n\n        docfile (construct-filename directory  original  file \&quot;.doc\&quot;)\n        docxfile (construct-filename directory  intermediate  file \&quot;.docx\&quot;)\n        markdownfile (construct-filename directory  intermediate  file \&quot;.in.md\&quot;)\n        intermediatefilename (construct-filename directory  intermediate  file \&quot;.out.md\&quot;)\n        outputfile (construct-filename directory  pre-published file (str \&quot;-\&quot; suffix \&quot;.\&quot; output))\n        ;one (println \&quot;doc2docx.bat \&quot; docfile \&quot; \&quot; docxfile)\n       ;(if (:docx options) (sh/sh \&quot;doc2docx.bat\&quot; docfile docxfile))\n        doc2docx (if (&gt; (lastModified docfile) (lastModified docxfile))\n          (do (println \&quot;Updating docx File\&quot;)\n              (sh/sh \&quot;doc2docx.bat\&quot; docfile docxfile)))\n        ;two (println \&quot;docx2md.bat \&quot; docxfile \&quot; \&quot; markdownfile)\n        docx2md (if (&gt; (lastModified docxfile) (lastModified markdownfile))\n              (do (println \&quot;Updating Markdown file\&quot;)\n                  (sh/sh \&quot;docx2md.bat\&quot; docxfile markdownfile)))]\n    (println doc2docx docx2md)\n\n    (if (not= exit 0)\n      (let [md (process-markdown-file markdownfile)]\n        (do (case style\n              \&quot;bo\&quot; (output-md (output-bo-markdown md) intermediatefilename)\n              \&quot;eng\&quot; (output-md (output-eng-markdown md) intermediatefilename)\n              \&quot;bo-nav\&quot; (output-md-with-navigation (output-bo-markdown md) md style intermediatefilename)\n              \&quot;boeng\&quot; (output-md (output-boeng-markdown md) intermediatefilename)\n              \&quot;boeng-nav\&quot; (output-md-with-navigation (output-boeng-markdown md) md style intermediatefilename)\n              \&quot;boeng-cols\&quot; (output-md (output-boeng-interlinear md) intermediatefilename))\n            (println \&quot;md2out.bat \&quot; intermediatefilename \&quot; \&quot; outputfile \&quot; \&quot; title \&quot; \&quot; stylesheet)\n            (sh/sh \&quot;md2out.bat\&quot; intermediatefilename outputfile  title stylesheet))))))&quot;, :offset 2343, :ns &quot;split-text.core&quot;} {:command &quot;(defn handle-document [style options]\n  (tap&gt; (str options))\n  (let [{:keys [output file title directory]} options\n        ;filestub (first (str/split file #\&quot;\\.\&quot;))\n        suffix (cond (= style \&quot;bo\&quot;)  \&quot;uniglot\&quot;\n                     (= style \&quot;eng\&quot;)  \&quot;english\&quot;\n                     (= style \&quot;bo-nav\&quot;)  \&quot;uniglot-nav\&quot;\n                     (= style \&quot;boeng\&quot;) \&quot;diglot-interlinear\&quot;\n                     (= style \&quot;boeng-nav\&quot;) \&quot;diglot-interlinear-nav\&quot;\n                     (= style \&quot;boeng-cols\&quot;) \&quot;diglot-side-by-side\&quot;)\n\n        docfile (construct-filename directory  original  file \&quot;.doc\&quot;)\n        docxfile (construct-filename directory  intermediate  file \&quot;.docx\&quot;)\n        markdownfile (construct-filename directory  intermediate  file \&quot;.in.md\&quot;)\n        intermediatefilename (construct-filename directory  intermediate  file \&quot;.out.md\&quot;)\n        outputfile (construct-filename directory  pre-published file (str \&quot;-\&quot; suffix \&quot;.\&quot; output))\n        ;one (println \&quot;doc2docx.bat \&quot; docfile \&quot; \&quot; docxfile)\n       ;(if (:docx options) (sh/sh \&quot;doc2docx.bat\&quot; docfile docxfile))\n        doc2docx  (&gt; (lastModified docfile) (lastModified docxfile))\n          ;(do (println \&quot;Updating docx File\&quot;)\n          ;    (sh/sh \&quot;doc2docx.bat\&quot; docfile docxfile)))\n        ;two (println \&quot;docx2md.bat \&quot; docxfile \&quot; \&quot; markdownfile)\n        docx2md (&gt; (lastModified docxfile) (lastModified markdownfile))]\n              ;(do (println \&quot;Updating Markdown file\&quot;)\n              ;    (sh/sh \&quot;docx2md.bat\&quot; docxfile markdownfile)))\n        \n    (println doc2docx docx2md)\n\n    (if (not= exit 0)\n      (let [md (process-markdown-file markdownfile)]\n        (do (case style\n              \&quot;bo\&quot; (output-md (output-bo-markdown md) intermediatefilename)\n              \&quot;eng\&quot; (output-md (output-eng-markdown md) intermediatefilename)\n              \&quot;bo-nav\&quot; (output-md-with-navigation (output-bo-markdown md) md style intermediatefilename)\n              \&quot;boeng\&quot; (output-md (output-boeng-markdown md) intermediatefilename)\n              \&quot;boeng-nav\&quot; (output-md-with-navigation (output-boeng-markdown md) md style intermediatefilename)\n              \&quot;boeng-cols\&quot; (output-md (output-boeng-interlinear md) intermediatefilename))\n            (println \&quot;md2out.bat \&quot; intermediatefilename \&quot; \&quot; outputfile \&quot; \&quot; title \&quot; \&quot; stylesheet)\n            (sh/sh \&quot;md2out.bat\&quot; intermediatefilename outputfile  title stylesheet))))))&quot;, :offset 2349, :ns &quot;split-text.core&quot;} {:command &quot;(defn handle-document [style options]\n  (tap&gt; (str options))\n  (let [{:keys [output file title directory]} options\n        ;filestub (first (str/split file #\&quot;\\.\&quot;))\n        suffix (cond (= style \&quot;bo\&quot;)  \&quot;uniglot\&quot;\n                     (= style \&quot;eng\&quot;)  \&quot;english\&quot;\n                     (= style \&quot;bo-nav\&quot;)  \&quot;uniglot-nav\&quot;\n                     (= style \&quot;boeng\&quot;) \&quot;diglot-interlinear\&quot;\n                     (= style \&quot;boeng-nav\&quot;) \&quot;diglot-interlinear-nav\&quot;\n                     (= style \&quot;boeng-cols\&quot;) \&quot;diglot-side-by-side\&quot;)\n\n        docfile (construct-filename directory  original  file \&quot;.doc\&quot;)\n        docxfile (construct-filename directory  intermediate  file \&quot;.docx\&quot;)\n        markdownfile (construct-filename directory  intermediate  file \&quot;.in.md\&quot;)\n        intermediatefilename (construct-filename directory  intermediate  file \&quot;.out.md\&quot;)\n        outputfile (construct-filename directory  pre-published file (str \&quot;-\&quot; suffix \&quot;.\&quot; output))\n        ;one (println \&quot;doc2docx.bat \&quot; docfile \&quot; \&quot; docxfile)\n       ;(if (:docx options) (sh/sh \&quot;doc2docx.bat\&quot; docfile docxfile))\n        doc2docx (println (lastModified docfile) (lastModified docxfile))\n          ;(do (println \&quot;Updating docx File\&quot;)\n          ;    (sh/sh \&quot;doc2docx.bat\&quot; docfile docxfile)))\n        ;two (println \&quot;docx2md.bat \&quot; docxfile \&quot; \&quot; markdownfile)\n        docx2md (println (lastModified docxfile) (lastModified markdownfile))]\n              ;(do (println \&quot;Updating Markdown file\&quot;)\n              ;    (sh/sh \&quot;docx2md.bat\&quot; docxfile markdownfile)))\n\n    (println doc2docx docx2md)\n\n    (if (not= exit 0)\n      (let [md (process-markdown-file markdownfile)]\n        (do (case style\n              \&quot;bo\&quot; (output-md (output-bo-markdown md) intermediatefilename)\n              \&quot;eng\&quot; (output-md (output-eng-markdown md) intermediatefilename)\n              \&quot;bo-nav\&quot; (output-md-with-navigation (output-bo-markdown md) md style intermediatefilename)\n              \&quot;boeng\&quot; (output-md (output-boeng-markdown md) intermediatefilename)\n              \&quot;boeng-nav\&quot; (output-md-with-navigation (output-boeng-markdown md) md style intermediatefilename)\n              \&quot;boeng-cols\&quot; (output-md (output-boeng-interlinear md) intermediatefilename))\n            (println \&quot;md2out.bat \&quot; intermediatefilename \&quot; \&quot; outputfile \&quot; \&quot; title \&quot; \&quot; stylesheet)\n            (sh/sh \&quot;md2out.bat\&quot; intermediatefilename outputfile  title stylesheet))))))&quot;, :offset 2352, :ns &quot;split-text.core&quot;} {:command &quot;(defn handle-document [style options]\n  (tap&gt; (str options))\n  (let [{:keys [output file title directory]} options\n        ;filestub (first (str/split file #\&quot;\\.\&quot;))\n        suffix (cond (= style \&quot;bo\&quot;)  \&quot;uniglot\&quot;\n                     (= style \&quot;eng\&quot;)  \&quot;english\&quot;\n                     (= style \&quot;bo-nav\&quot;)  \&quot;uniglot-nav\&quot;\n                     (= style \&quot;boeng\&quot;) \&quot;diglot-interlinear\&quot;\n                     (= style \&quot;boeng-nav\&quot;) \&quot;diglot-interlinear-nav\&quot;\n                     (= style \&quot;boeng-cols\&quot;) \&quot;diglot-side-by-side\&quot;)\n\n        docfile (construct-filename directory  original  file \&quot;.doc\&quot;)\n        docxfile (construct-filename directory  intermediate  file \&quot;.docx\&quot;)\n        markdownfile (construct-filename directory  intermediate  file \&quot;.in.md\&quot;)\n        intermediatefilename (construct-filename directory  intermediate  file \&quot;.out.md\&quot;)\n        outputfile (construct-filename directory  pre-published file (str \&quot;-\&quot; suffix \&quot;.\&quot; output))\n        ;one (println \&quot;doc2docx.bat \&quot; docfile \&quot; \&quot; docxfile)\n       ;(if (:docx options) (sh/sh \&quot;doc2docx.bat\&quot; docfile docxfile))\n        doc2docx (if (&lt; (lastModified docfile) (lastModified docxfile))\n          (do (println \&quot;Updating docx File\&quot;)\n              (sh/sh \&quot;doc2docx.bat\&quot; docfile docxfile)))\n        ;two (println \&quot;docx2md.bat \&quot; docxfile \&quot; \&quot; markdownfile)\n        docx2md (if (&lt; (lastModified docxfile) (lastModified markdownfile))\n              (do (println \&quot;Updating Markdown file\&quot;)\n                  (sh/sh \&quot;docx2md.bat\&quot; docxfile markdownfile)))\n        ]\n    (println doc2docx docx2md)\n\n    (if (not= exit 0)\n      (let [md (process-markdown-file markdownfile)]\n        (do (case style\n              \&quot;bo\&quot; (output-md (output-bo-markdown md) intermediatefilename)\n              \&quot;eng\&quot; (output-md (output-eng-markdown md) intermediatefilename)\n              \&quot;bo-nav\&quot; (output-md-with-navigation (output-bo-markdown md) md style intermediatefilename)\n              \&quot;boeng\&quot; (output-md (output-boeng-markdown md) intermediatefilename)\n              \&quot;boeng-nav\&quot; (output-md-with-navigation (output-boeng-markdown md) md style intermediatefilename)\n              \&quot;boeng-cols\&quot; (output-md (output-boeng-interlinear md) intermediatefilename))\n            (println \&quot;md2out.bat \&quot; intermediatefilename \&quot; \&quot; outputfile \&quot; \&quot; title \&quot; \&quot; stylesheet)\n            (sh/sh \&quot;md2out.bat\&quot; intermediatefilename outputfile  title stylesheet))))))&quot;, :offset 2352, :ns &quot;split-text.core&quot;} {:command &quot;(comp (lastModified docxf) (lastModified mdf))&quot;, :offset 46, :ns &quot;split-text.core&quot;} {:command &quot;(do (lastModified docxf) (lastModified mdf))&quot;, :offset 44, :ns &quot;split-text.core&quot;} {:command &quot;(do (lastModified docxf))&quot;, :offset 25, :ns &quot;split-text.core&quot;} {:command &quot;(do (lastModified mdf))&quot;, :offset 23, :ns &quot;split-text.core&quot;} {:command &quot;( (lastModified mdf))&quot;, :offset 1} {:command &quot;(&gt; (lastModified docxf) (lastModified mdf))&quot;, :offset 43, :ns &quot;split-text.core&quot;} {:command &quot;(&lt; (lastModified docxf) (lastModified mdf))&quot;, :offset 43, :ns &quot;split-text.core&quot;} {:command &quot;(defn handle-document [style options]\n  (tap&gt; (str options))\n  (let [{:keys [output file title directory]} options\n        ;filestub (first (str/split file #\&quot;\\.\&quot;))\n        suffix (cond (= style \&quot;bo\&quot;)  \&quot;uniglot\&quot;\n                     (= style \&quot;eng\&quot;)  \&quot;english\&quot;\n                     (= style \&quot;bo-nav\&quot;)  \&quot;uniglot-nav\&quot;\n                     (= style \&quot;boeng\&quot;) \&quot;diglot-interlinear\&quot;\n                     (= style \&quot;boeng-nav\&quot;) \&quot;diglot-interlinear-nav\&quot;\n                     (= style \&quot;boeng-cols\&quot;) \&quot;diglot-side-by-side\&quot;)\n\n        docfile (construct-filename directory  original  file \&quot;.doc\&quot;)\n        docxfile (construct-filename directory  intermediate  file \&quot;.docx\&quot;)\n        markdownfile (construct-filename directory  intermediate  file \&quot;.in.md\&quot;)\n        intermediatefilename (construct-filename directory  intermediate  file \&quot;.out.md\&quot;)\n        outputfile (construct-filename directory  pre-published file (str \&quot;-\&quot; suffix \&quot;.\&quot; output))\n        ;one (println \&quot;doc2docx.bat \&quot; docfile \&quot; \&quot; docxfile)\n       ;(if (:docx options) (sh/sh \&quot;doc2docx.bat\&quot; docfile docxfile))\n        doc2docx (if (&lt; (lastModified docfile) (lastModified docxfile))\n          (do (println \&quot;Updating docx File \&quot; (lastModified docxfile))\n              (sh/sh \&quot;doc2docx.bat\&quot; docfile docxfile)))\n        x (println \&quot;after \&quot;( lastModified docxfile))\n        ;two (println \&quot;docx2md.bat \&quot; docxfile \&quot; \&quot; markdownfile)\n        docx2md (if (&lt; (lastModified docxfile) (lastModified markdownfile))\n              (do (println \&quot;Updating Markdown file\&quot;)\n                  (sh/sh \&quot;docx2md.bat\&quot; docxfile markdownfile)))\n        ]\n    (println doc2docx docx2md)\n\n    (if (not= exit 0)\n      (let [md (process-markdown-file markdownfile)]\n        (do (case style\n              \&quot;bo\&quot; (output-md (output-bo-markdown md) intermediatefilename)\n              \&quot;eng\&quot; (output-md (output-eng-markdown md) intermediatefilename)\n              \&quot;bo-nav\&quot; (output-md-with-navigation (output-bo-markdown md) md style intermediatefilename)\n              \&quot;boeng\&quot; (output-md (output-boeng-markdown md) intermediatefilename)\n              \&quot;boeng-nav\&quot; (output-md-with-navigation (output-boeng-markdown md) md style intermediatefilename)\n              \&quot;boeng-cols\&quot; (output-md (output-boeng-interlinear md) intermediatefilename))\n            (println \&quot;md2out.bat \&quot; intermediatefilename \&quot; \&quot; outputfile \&quot; \&quot; title \&quot; \&quot; stylesheet)\n            (sh/sh \&quot;md2out.bat\&quot; intermediatefilename outputfile  title stylesheet))))))&quot;, :offset 2430, :ns &quot;split-text.core&quot;} {:command &quot;(defn handle-document [style options]\n  (tap&gt; (str options))\n  (let [{:keys [output file title directory]} options\n        ;filestub (first (str/split file #\&quot;\\.\&quot;))\n        suffix (cond (= style \&quot;bo\&quot;)  \&quot;uniglot\&quot;\n                     (= style \&quot;eng\&quot;)  \&quot;english\&quot;\n                     (= style \&quot;bo-nav\&quot;)  \&quot;uniglot-nav\&quot;\n                     (= style \&quot;boeng\&quot;) \&quot;diglot-interlinear\&quot;\n                     (= style \&quot;boeng-nav\&quot;) \&quot;diglot-interlinear-nav\&quot;\n                     (= style \&quot;boeng-cols\&quot;) \&quot;diglot-side-by-side\&quot;)\n\n        docfile (construct-filename directory  original  file \&quot;.doc\&quot;)\n        docxfile (construct-filename directory  intermediate  file \&quot;.docx\&quot;)\n        markdownfile (construct-filename directory  intermediate  file \&quot;.in.md\&quot;)\n        intermediatefilename (construct-filename directory  intermediate  file \&quot;.out.md\&quot;)\n        outputfile (construct-filename directory  pre-published file (str \&quot;-\&quot; suffix \&quot;.\&quot; output))\n        ;one (println \&quot;doc2docx.bat \&quot; docfile \&quot; \&quot; docxfile)\n       ;(if (:docx options) (sh/sh \&quot;doc2docx.bat\&quot; docfile docxfile))\n        doc2docx (if (&lt; (lastModified docfile) (lastModified docxfile))\n          (do (println \&quot;Updating docx File \&quot; (lastModified docxfile))\n              (sh/sh \&quot;doc2docx.bat\&quot; docfile docxfile)))\n        x (println \&quot;after \&quot;( lastModified docxfile) \&quot;:\&quot; (lastModified markdownfile))\n        ;two (println \&quot;docx2md.bat \&quot; docxfile \&quot; \&quot; markdownfile)\n        docx2md (if (&lt; (lastModified docxfile) )\n              (do (println \&quot;Updating Markdown file\&quot;)\n                  (sh/sh \&quot;docx2md.bat\&quot; docxfile markdownfile)))\n        ]\n    (println doc2docx docx2md)\n\n    (if (not= exit 0)\n      (let [md (process-markdown-file markdownfile)]\n        (do (case style\n              \&quot;bo\&quot; (output-md (output-bo-markdown md) intermediatefilename)\n              \&quot;eng\&quot; (output-md (output-eng-markdown md) intermediatefilename)\n              \&quot;bo-nav\&quot; (output-md-with-navigation (output-bo-markdown md) md style intermediatefilename)\n              \&quot;boeng\&quot; (output-md (output-boeng-markdown md) intermediatefilename)\n              \&quot;boeng-nav\&quot; (output-md-with-navigation (output-boeng-markdown md) md style intermediatefilename)\n              \&quot;boeng-cols\&quot; (output-md (output-boeng-interlinear md) intermediatefilename))\n            (println \&quot;md2out.bat \&quot; intermediatefilename \&quot; \&quot; outputfile \&quot; \&quot; title \&quot; \&quot; stylesheet)\n            (sh/sh \&quot;md2out.bat\&quot; intermediatefilename outputfile  title stylesheet))))))&quot;, :offset 2435, :ns &quot;split-text.core&quot;} {:command &quot;(defn handle-document [style options]\n  (tap&gt; (str options))\n  (let [{:keys [output file title directory]} options\n        ;filestub (first (str/split file #\&quot;\\.\&quot;))\n        suffix (cond (= style \&quot;bo\&quot;)  \&quot;uniglot\&quot;\n                     (= style \&quot;eng\&quot;)  \&quot;english\&quot;\n                     (= style \&quot;bo-nav\&quot;)  \&quot;uniglot-nav\&quot;\n                     (= style \&quot;boeng\&quot;) \&quot;diglot-interlinear\&quot;\n                     (= style \&quot;boeng-nav\&quot;) \&quot;diglot-interlinear-nav\&quot;\n                     (= style \&quot;boeng-cols\&quot;) \&quot;diglot-side-by-side\&quot;)\n\n        docfile (construct-filename directory  original  file \&quot;.doc\&quot;)\n        docxfile (construct-filename directory  intermediate  file \&quot;.docx\&quot;)\n        markdownfile (construct-filename directory  intermediate  file \&quot;.in.md\&quot;)\n        intermediatefilename (construct-filename directory  intermediate  file \&quot;.out.md\&quot;)\n        outputfile (construct-filename directory  pre-published file (str \&quot;-\&quot; suffix \&quot;.\&quot; output))\n        ;one (println \&quot;doc2docx.bat \&quot; docfile \&quot; \&quot; docxfile)\n       ;(if (:docx options) (sh/sh \&quot;doc2docx.bat\&quot; docfile docxfile))\n        doc2docx (if (&lt; (lastModified docfile) (lastModified docxfile))\n          (do (println \&quot;Updating docx File \&quot; (lastModified docxfile))\n              (sh/sh \&quot;doc2docx.bat\&quot; docfile docxfile)))\n        ;two (println \&quot;docx2md.bat \&quot; docxfile \&quot; \&quot; markdownfile)\n        docx2md (if (&lt; (lastModified docxfile) )\n              (do (println \&quot;Updating Markdown file\&quot;)\n                  (sh/sh \&quot;docx2md.bat\&quot; docxfile markdownfile)))\n        ]\n    (println doc2docx docx2md)\n\n    (if (not= exit 0)\n      (let [md (process-markdown-file markdownfile)]\n        (do (case style\n              \&quot;bo\&quot; (output-md (output-bo-markdown md) intermediatefilename)\n              \&quot;eng\&quot; (output-md (output-eng-markdown md) intermediatefilename)\n              \&quot;bo-nav\&quot; (output-md-with-navigation (output-bo-markdown md) md style intermediatefilename)\n              \&quot;boeng\&quot; (output-md (output-boeng-markdown md) intermediatefilename)\n              \&quot;boeng-nav\&quot; (output-md-with-navigation (output-boeng-markdown md) md style intermediatefilename)\n              \&quot;boeng-cols\&quot; (output-md (output-boeng-interlinear md) intermediatefilename))\n            (println \&quot;md2out.bat \&quot; intermediatefilename \&quot; \&quot; outputfile \&quot; \&quot; title \&quot; \&quot; stylesheet)\n            (sh/sh \&quot;md2out.bat\&quot; intermediatefilename outputfile  title stylesheet))))))&quot;, :offset 2350, :ns &quot;split-text.core&quot;} {:command &quot;(defn file-exists? [fn]\n  (.exists (get-file fn)))&quot;, :offset 50, :ns &quot;split-text.io&quot;} {:command &quot;(defn handle-document [style options]\n  (tap&gt; (str options))\n  (let [{:keys [output file title directory]} options\n        ;filestub (first (str/split file #\&quot;\\.\&quot;))\n        suffix (cond (= style \&quot;bo\&quot;)  \&quot;uniglot\&quot;\n                     (= style \&quot;eng\&quot;)  \&quot;english\&quot;\n                     (= style \&quot;bo-nav\&quot;)  \&quot;uniglot-nav\&quot;\n                     (= style \&quot;boeng\&quot;) \&quot;diglot-interlinear\&quot;\n                     (= style \&quot;boeng-nav\&quot;) \&quot;diglot-interlinear-nav\&quot;\n                     (= style \&quot;boeng-cols\&quot;) \&quot;diglot-side-by-side\&quot;)\n\n        docfile (construct-filename directory  original  file \&quot;.doc\&quot;)\n        docxfile (construct-filename directory  intermediate  file \&quot;.docx\&quot;)\n        markdownfile (construct-filename directory  intermediate  file \&quot;.in.md\&quot;)\n        intermediatefilename (construct-filename directory  intermediate  file \&quot;.out.md\&quot;)\n        outputfile (construct-filename directory  pre-published file (str \&quot;-\&quot; suffix \&quot;.\&quot; output))\n        ;one (println \&quot;doc2docx.bat \&quot; docfile \&quot; \&quot; docxfile)\n       ;(if (:docx options) (sh/sh \&quot;doc2docx.bat\&quot; docfile docxfile))\n        doc2docx (if (or (not (file-exists? docxfile)) (&lt; (lastModified docfile) (lastModified docxfile)))\n                   (do (println \&quot;Updating docx File \&quot; (lastModified docxfile))\n              (sh/sh \&quot;doc2docx.bat\&quot; docfile docxfile)))\n        ;two (println \&quot;docx2md.bat \&quot; docxfile \&quot; \&quot; markdownfile)\n        docx2md (if (or (not (file-exists? markdownfile)) (&lt; (lastModified docxfile) (lastModified markdownfile)))\n              (do (println \&quot;Updating Markdown file\&quot;)\n                  (sh/sh \&quot;docx2md.bat\&quot; docxfile markdownfile)))\n        ]\n    (println doc2docx docx2md)\n\n    (if (not= exit 0)\n      (let [md (process-markdown-file markdownfile)]\n        (do (case style\n              \&quot;bo\&quot; (output-md (output-bo-markdown md) intermediatefilename)\n              \&quot;eng\&quot; (output-md (output-eng-markdown md) intermediatefilename)\n              \&quot;bo-nav\&quot; (output-md-with-navigation (output-bo-markdown md) md style intermediatefilename)\n              \&quot;boeng\&quot; (output-md (output-boeng-markdown md) intermediatefilename)\n              \&quot;boeng-nav\&quot; (output-md-with-navigation (output-boeng-markdown md) md style intermediatefilename)\n              \&quot;boeng-cols\&quot; (output-md (output-boeng-interlinear md) intermediatefilename))\n            (println \&quot;md2out.bat \&quot; intermediatefilename \&quot; \&quot; outputfile \&quot; \&quot; title \&quot; \&quot; stylesheet)\n            (sh/sh \&quot;md2out.bat\&quot; intermediatefilename outputfile  title stylesheet))))))&quot;, :offset 2460, :ns &quot;split-text.core&quot;} {:command &quot;(file-exists? docxf)&quot;, :offset 20, :ns &quot;split-text.core&quot;} {:command &quot;(not (file-exists? docxf))&quot;, :offset 26, :ns &quot;split-text.core&quot;} {:command &quot;(or (not (file-exists? docxf)) (&gt; (lastModified docf) (lastModified docxf)))&quot;, :offset 76, :ns &quot;split-text.core&quot;} {:command &quot;(if (or (not (file-exists? docxf)) (&gt; (lastModified docf) (lastModified docxf)))\n  (do (println \&quot;Updating docx File \&quot; (lastModified docxf))))&quot;, :offset 141, :ns &quot;split-text.core&quot;} {:command &quot;(defn handle-document [style options]\n  (tap&gt; (str options))\n  (let [{:keys [output file title directory]} options\n        ;filestub (first (str/split file #\&quot;\\.\&quot;))\n        suffix (cond (= style \&quot;bo\&quot;)  \&quot;uniglot\&quot;\n                     (= style \&quot;eng\&quot;)  \&quot;english\&quot;\n                     (= style \&quot;bo-nav\&quot;)  \&quot;uniglot-nav\&quot;\n                     (= style \&quot;boeng\&quot;) \&quot;diglot-interlinear\&quot;\n                     (= style \&quot;boeng-nav\&quot;) \&quot;diglot-interlinear-nav\&quot;\n                     (= style \&quot;boeng-cols\&quot;) \&quot;diglot-side-by-side\&quot;)\n\n        docfile (construct-filename directory  original  file \&quot;.doc\&quot;)\n        docxfile (construct-filename directory  intermediate  file \&quot;.docx\&quot;)\n        markdownfile (construct-filename directory  intermediate  file \&quot;.in.md\&quot;)\n        intermediatefilename (construct-filename directory  intermediate  file \&quot;.out.md\&quot;)\n        outputfile (construct-filename directory  pre-published file (str \&quot;-\&quot; suffix \&quot;.\&quot; output))\n        ;one (println \&quot;doc2docx.bat \&quot; docfile \&quot; \&quot; docxfile)\n       ;(if (:docx options) (sh/sh \&quot;doc2docx.bat\&quot; docfile docxfile))\n        doc2docx (if (or (not (file-exists? docxfile)) (&gt; (lastModified docfile) (lastModified docxfile)))\n                   (do (println \&quot;Updating docx File \&quot; (lastModified docxfile))\n              (sh/sh \&quot;doc2docx.bat\&quot; docfile docxfile)))\n        ;two (println \&quot;docx2md.bat \&quot; docxfile \&quot; \&quot; markdownfile)\n        docx2md (if (or (not (file-exists? markdownfile)) (&gt; (lastModified docxfile) (lastModified markdownfile)))\n              (do (println \&quot;Updating Markdown file\&quot;)\n                  (sh/sh \&quot;docx2md.bat\&quot; docxfile markdownfile)))\n        ]\n\n    (if (not= exit 0)\n      (let [md (process-markdown-file markdownfile)]\n        (do (case style\n              \&quot;bo\&quot; (output-md (output-bo-markdown md) intermediatefilename)\n              \&quot;eng\&quot; (output-md (output-eng-markdown md) intermediatefilename)\n              \&quot;bo-nav\&quot; (output-md-with-navigation (output-bo-markdown md) md style intermediatefilename)\n              \&quot;boeng\&quot; (output-md (output-boeng-markdown md) intermediatefilename)\n              \&quot;boeng-nav\&quot; (output-md-with-navigation (output-boeng-markdown md) md style intermediatefilename)\n              \&quot;boeng-cols\&quot; (output-md (output-boeng-interlinear md) intermediatefilename))\n            (println \&quot;md2out.bat \&quot; intermediatefilename \&quot; \&quot; outputfile \&quot; \&quot; title \&quot; \&quot; stylesheet)\n            (sh/sh \&quot;md2out.bat\&quot; intermediatefilename outputfile  title stylesheet))))))&quot;, :offset 2429, :ns &quot;split-text.core&quot;} {:command &quot;(defn handle-document [style options]\n  (tap&gt; (str options))\n  (let [{:keys [output file title directory]} options\n        ;filestub (first (str/split file #\&quot;\\.\&quot;))\n        suffix (cond (= style \&quot;bo\&quot;)  \&quot;uniglot\&quot;\n                     (= style \&quot;eng\&quot;)  \&quot;english\&quot;\n                     (= style \&quot;bo-nav\&quot;)  \&quot;uniglot-nav\&quot;\n                     (= style \&quot;boeng\&quot;) \&quot;diglot-interlinear\&quot;\n                     (= style \&quot;boeng-nav\&quot;) \&quot;diglot-interlinear-nav\&quot;\n                     (= style \&quot;boeng-cols\&quot;) \&quot;diglot-side-by-side\&quot;)\n\n        docfile (construct-filename directory  original  file \&quot;.doc\&quot;)\n        docxfile (construct-filename directory  intermediate  file \&quot;.docx\&quot;)\n        markdownfile (construct-filename directory  intermediate  file \&quot;.in.md\&quot;)\n        intermediatefilename (construct-filename directory  intermediate  file \&quot;.out.md\&quot;)\n        outputfile (construct-filename directory  pre-published file (str \&quot;-\&quot; suffix \&quot;.\&quot; output))]\n        ;one (println \&quot;doc2docx.bat \&quot; docfile \&quot; \&quot; docxfile)\n       ;(if (:docx options) (sh/sh \&quot;doc2docx.bat\&quot; docfile docxfile))\n       (if (or (not (file-exists? docxfile)) (&gt; (lastModified docfile) (lastModified docxfile)))\n                   (do (println \&quot;Updating docx File \&quot; (lastModified docxfile))\n                       (sh/sh \&quot;doc2docx.bat\&quot; docfile docxfile)))\n        ;two (println \&quot;docx2md.bat \&quot; docxfile \&quot; \&quot; markdownfile)\n        (if (or (not (file-exists? markdownfile)) (&gt; (lastModified docxfile) (lastModified markdownfile)))\n                  (do (println \&quot;Updating Markdown file\&quot;)\n                      (sh/sh \&quot;docx2md.bat\&quot; docxfile markdownfile)))\n    \n\n    (if (not= exit 0)\n      (let [md (process-markdown-file markdownfile)]\n        (do (case style\n              \&quot;bo\&quot; (output-md (output-bo-markdown md) intermediatefilename)\n              \&quot;eng\&quot; (output-md (output-eng-markdown md) intermediatefilename)\n              \&quot;bo-nav\&quot; (output-md-with-navigation (output-bo-markdown md) md style intermediatefilename)\n              \&quot;boeng\&quot; (output-md (output-boeng-markdown md) intermediatefilename)\n              \&quot;boeng-nav\&quot; (output-md-with-navigation (output-boeng-markdown md) md style intermediatefilename)\n              \&quot;boeng-cols\&quot; (output-md (output-boeng-interlinear md) intermediatefilename))\n            (println \&quot;md2out.bat \&quot; intermediatefilename \&quot; \&quot; outputfile \&quot; \&quot; title \&quot; \&quot; stylesheet)\n            (sh/sh \&quot;md2out.bat\&quot; intermediatefilename outputfile  title stylesheet))))))&quot;, :offset 2424, :ns &quot;split-text.core&quot;} {:command &quot;(defn handle-document [style options]\n  (tap&gt; (str options))\n  (let [{:keys [output file title directory]} options\n        ;filestub (first (str/split file #\&quot;\\.\&quot;))\n        suffix (cond (= style \&quot;bo\&quot;)  \&quot;uniglot\&quot;\n                     (= style \&quot;eng\&quot;)  \&quot;english\&quot;\n                     (= style \&quot;bo-nav\&quot;)  \&quot;uniglot-nav\&quot;\n                     (= style \&quot;boeng\&quot;) \&quot;diglot-interlinear\&quot;\n                     (= style \&quot;boeng-nav\&quot;) \&quot;diglot-interlinear-nav\&quot;\n                     (= style \&quot;boeng-cols\&quot;) \&quot;diglot-side-by-side\&quot;)\n\n        docfile (construct-filename directory  original  file \&quot;.doc\&quot;)\n        docxfile (construct-filename directory  intermediate  file \&quot;.docx\&quot;)\n        markdownfile (construct-filename directory  intermediate  file \&quot;.in.md\&quot;)\n        intermediatefilename (construct-filename directory  intermediate  file \&quot;.out.md\&quot;)\n        outputfile (construct-filename directory  pre-published file (str \&quot;-\&quot; suffix \&quot;.\&quot; output))]\n        ;one (println \&quot;doc2docx.bat \&quot; docfile \&quot; \&quot; docxfile)\n       ;(if (:docx options) (sh/sh \&quot;doc2docx.bat\&quot; docfile docxfile))\n       (if (or (not (file-exists? docxfile)) (&gt; (lastModified docfile) (lastModified docxfile)))\n                   (do (println \&quot;Updating docx File \&quot; (lastModified docxfile))\n                       (sh/sh \&quot;doc2docx.bat\&quot; docfile docxfile))\n                   (println \&quot;doc has not changed.\&quot;))\n        ;two (println \&quot;docx2md.bat \&quot; docxfile \&quot; \&quot; markdownfile)\n        (if (or (not (file-exists? markdownfile)) (&gt; (lastModified docxfile) (lastModified markdownfile)))\n                  (do (println \&quot;Updating Markdown file\&quot;)\n                      (sh/sh \&quot;docx2md.bat\&quot; docxfile markdownfile))\n                  (println \&quot;docx has not changed.\&quot;))\n\n\n    (if (not= exit 0)\n      (let [md (process-markdown-file markdownfile)]\n        (do (case style\n              \&quot;bo\&quot; (output-md (output-bo-markdown md) intermediatefilename)\n              \&quot;eng\&quot; (output-md (output-eng-markdown md) intermediatefilename)\n              \&quot;bo-nav\&quot; (output-md-with-navigation (output-bo-markdown md) md style intermediatefilename)\n              \&quot;boeng\&quot; (output-md (output-boeng-markdown md) intermediatefilename)\n              \&quot;boeng-nav\&quot; (output-md-with-navigation (output-boeng-markdown md) md style intermediatefilename)\n              \&quot;boeng-cols\&quot; (output-md (output-boeng-interlinear md) intermediatefilename))\n            (println \&quot;md2out.bat \&quot; intermediatefilename \&quot; \&quot; outputfile \&quot; \&quot; title \&quot; \&quot; stylesheet)\n            (sh/sh \&quot;md2out.bat\&quot; intermediatefilename outputfile  title stylesheet))))))&quot;, :offset 2524, :ns &quot;split-text.core&quot;} {:command &quot;(defn handle-document [style options]\n  (tap&gt; (str options))\n  (let [{:keys [output file title directory]} options\n        ;filestub (first (str/split file #\&quot;\\.\&quot;))\n        suffix (cond (= style \&quot;bo\&quot;)  \&quot;uniglot\&quot;\n                     (= style \&quot;eng\&quot;)  \&quot;english\&quot;\n                     (= style \&quot;bo-nav\&quot;)  \&quot;uniglot-nav\&quot;\n                     (= style \&quot;boeng\&quot;) \&quot;diglot-interlinear\&quot;\n                     (= style \&quot;boeng-nav\&quot;) \&quot;diglot-interlinear-nav\&quot;\n                     (= style \&quot;boeng-cols\&quot;) \&quot;diglot-side-by-side\&quot;)\n\n        docfile (construct-filename directory  original  file \&quot;.doc\&quot;)\n        docxfile (construct-filename directory  intermediate  file \&quot;.docx\&quot;)\n        markdownfile (construct-filename directory  intermediate  file \&quot;.in.md\&quot;)\n        intermediatefilename (construct-filename directory  intermediate  file \&quot;.out.md\&quot;)\n        outputfile (construct-filename directory  pre-published file (str \&quot;-\&quot; suffix \&quot;.\&quot; output))]\n        ;one (println \&quot;doc2docx.bat \&quot; docfile \&quot; \&quot; docxfile)\n       ;(if (:docx options) (sh/sh \&quot;doc2docx.bat\&quot; docfile docxfile))\n       (if (or (not (file-exists? docxfile)) (and (file-exists? docxfile )\n                                                  (&gt; (lastModified docfile) (lastModified docxfile))))\n                   (do (println \&quot;Updating docx File \&quot; (lastModified docxfile))\n                       (sh/sh \&quot;doc2docx.bat\&quot; docfile docxfile))\n                   (println \&quot;doc has not changed.\&quot;))\n        ;two (println \&quot;docx2md.bat \&quot; docxfile \&quot; \&quot; markdownfile)\n        (if (or (not (file-exists? markdownfile)) (and (file-exists? markdownfile)\n                                                       (&gt; (lastModified docxfile) (lastModified markdownfile))))\n                  (do (println \&quot;Updating Markdown file\&quot;)\n                      (sh/sh \&quot;docx2md.bat\&quot; docxfile markdownfile))\n                  (println \&quot;docx has not changed.\&quot;))\n\n\n    (if (not= exit 0)\n      (let [md (process-markdown-file markdownfile)]\n        (do (case style\n              \&quot;bo\&quot; (output-md (output-bo-markdown md) intermediatefilename)\n              \&quot;eng\&quot; (output-md (output-eng-markdown md) intermediatefilename)\n              \&quot;bo-nav\&quot; (output-md-with-navigation (output-bo-markdown md) md style intermediatefilename)\n              \&quot;boeng\&quot; (output-md (output-boeng-markdown md) intermediatefilename)\n              \&quot;boeng-nav\&quot; (output-md-with-navigation (output-boeng-markdown md) md style intermediatefilename)\n              \&quot;boeng-cols\&quot; (output-md (output-boeng-interlinear md) intermediatefilename))\n            (println \&quot;md2out.bat \&quot; intermediatefilename \&quot; \&quot; outputfile \&quot; \&quot; title \&quot; \&quot; stylesheet)\n            (sh/sh \&quot;md2out.bat\&quot; intermediatefilename outputfile  title stylesheet))))))&quot;, :offset 2694, :ns &quot;split-text.core&quot;} {:command &quot;(file-exists? mdf)&quot;, :offset 18, :ns &quot;split-text.core&quot;} {:command &quot;(def markdownfile mdf)&quot;, :offset 22, :ns &quot;split-text.core&quot;} {:command &quot;(or (not (file-exists? markdownfile)) (and (file-exists? markdownfile)\n                                           (&gt; (lastModified docxf) (lastModified markdownfile))))&quot;, :offset 168, :ns &quot;split-text.core&quot;} {:command &quot;(def docxfile docxf)&quot;, :offset 20, :ns &quot;split-text.core&quot;} {:command &quot;(def docfile docf)&quot;, :offset 18, :ns &quot;split-text.core&quot;} {:command &quot;(if (or (not (file-exists? docxfile)) (and (file-exists? docxfile )\n                                           (&gt; (lastModified docfile) (lastModified docxfile))))\n  (do (println \&quot;Updating docx File \&quot; (lastModified docxfile))\n      (sh/sh \&quot;doc2docx.bat\&quot; docfile docxfile))\n  (println \&quot;doc has not changed.\&quot;))&quot;, :offset 308, :ns &quot;split-text.core&quot;} {:command &quot;(or (not (file-exists? docxfile)) (and (file-exists? docxfile)\n                                       (&gt; (lastModified docfile) (lastModified docxfile))))&quot;, :offset 154, :ns &quot;split-text.core&quot;} {:command &quot;(defn handle-document [style options]\n  (tap&gt; (str options))\n  (let [{:keys [output file title directory]} options\n        ;filestub (first (str/split file #\&quot;\\.\&quot;))\n        suffix (cond (= style \&quot;bo\&quot;)  \&quot;uniglot\&quot;\n                     (= style \&quot;eng\&quot;)  \&quot;english\&quot;\n                     (= style \&quot;bo-nav\&quot;)  \&quot;uniglot-nav\&quot;\n                     (= style \&quot;boeng\&quot;) \&quot;diglot-interlinear\&quot;\n                     (= style \&quot;boeng-nav\&quot;) \&quot;diglot-interlinear-nav\&quot;\n                     (= style \&quot;boeng-cols\&quot;) \&quot;diglot-side-by-side\&quot;)\n\n        docfile (construct-filename directory  original  file \&quot;.doc\&quot;)\n        docxfile (construct-filename directory  intermediate  file \&quot;.docx\&quot;)\n        markdownfile (construct-filename directory  intermediate  file \&quot;.in.md\&quot;)\n        intermediatefilename (construct-filename directory  intermediate  file \&quot;.out.md\&quot;)\n        outputfile (construct-filename directory  pre-published file (str \&quot;-\&quot; suffix \&quot;.\&quot; output))]\n        ;one (println \&quot;doc2docx.bat \&quot; docfile \&quot; \&quot; docxfile)\n       ;(if (:docx options) (sh/sh \&quot;doc2docx.bat\&quot; docfile docxfile))\n        (do \n       (if (or (not (file-exists? docxfile)) (and (file-exists? docxfile )\n                                                  (&gt; (lastModified docfile) (lastModified docxfile))))\n                   (do (println \&quot;Updating docx File \&quot; (lastModified docxfile))\n                       (sh/sh \&quot;doc2docx.bat\&quot; docfile docxfile))\n                   (println \&quot;doc has not changed.\&quot;))\n        ;two (println \&quot;docx2md.bat \&quot; docxfile \&quot; \&quot; markdownfile)\n        (if (or (not (file-exists? markdownfile)) (and (file-exists? markdownfile)\n                                                       (&gt; (lastModified docxfile) (lastModified markdownfile))))\n                  (do (println \&quot;Updating Markdown file\&quot;)\n                      (sh/sh \&quot;docx2md.bat\&quot; docxfile markdownfile))\n                  (println \&quot;docx has not changed.\&quot;))\n\n\n    (if (not= exit 0)\n      (let [md (process-markdown-file markdownfile)]\n        (do (case style\n              \&quot;bo\&quot; (output-md (output-bo-markdown md) intermediatefilename)\n              \&quot;eng\&quot; (output-md (output-eng-markdown md) intermediatefilename)\n              \&quot;bo-nav\&quot; (output-md-with-navigation (output-bo-markdown md) md style intermediatefilename)\n              \&quot;boeng\&quot; (output-md (output-boeng-markdown md) intermediatefilename)\n              \&quot;boeng-nav\&quot; (output-md-with-navigation (output-boeng-markdown md) md style intermediatefilename)\n              \&quot;boeng-cols\&quot; (output-md (output-boeng-interlinear md) intermediatefilename))\n            (println \&quot;md2out.bat \&quot; intermediatefilename \&quot; \&quot; outputfile \&quot; \&quot; title \&quot; \&quot; stylesheet)\n            (sh/sh \&quot;md2out.bat\&quot; intermediatefilename outputfile  title stylesheet)))))))&quot;, :offset 2708, :ns &quot;split-text.core&quot;} {:command &quot;(-main \&quot;-f\&quot; \&quot;Revelation-test\&quot; \&quot;-d\&quot; \&quot;C:\\\\Users\\\\MartinRoberts\\\\Sync\\\\NT\\\\Revelation\&quot; \&quot;-t\&quot; \&quot;Revelation\&quot; \&quot;bo\&quot;)&quot;, :offset 107, :ns &quot;split-text.core&quot;}], :remote []}}</component>
  <component name="RunManager" selected="Clojure REPL.REPL for split-text">
    <configuration name="REPL for split-text" type="ClojureREPL" factoryName="Local" activateToolWindowBeforeRun="false">
      <module name="split-text" />
      <setting name="replType" value="NREPL" />
      <setting name="execution" value="DEPS" />
      <setting name="jvmArgs" value="" />
      <setting name="parameters" value="" />
      <setting name="workingDir" value="$PROJECT_DIR$" />
      <setting name="profiles" value="" />
      <setting name="aliases" value="repl" />
      <setting name="fixLineNumbers" value="false" />
      <method v="2" />
    </configuration>
    <configuration name="Reveal" type="ClojureREPL" factoryName="Local" activateToolWindowBeforeRun="false">
      <module name="split-text" />
      <setting name="replType" value="CLOJURE_MAIN" />
      <setting name="execution" value="DEPS" />
      <setting name="jvmArgs" value="-Dvlaaad.reveal.prefs={:theme,:light}" />
      <setting name="parameters" value="" />
      <setting name="workingDir" value="$PROJECT_DIR$" />
      <setting name="profiles" value="" />
      <setting name="aliases" value="repl" />
      <setting name="fixLineNumbers" value="false" />
      <method v="2" />
    </configuration>
    <configuration default="true" type="ClojureREPL" factoryName="Local" activateToolWindowBeforeRun="false">
      <setting name="replType" value="NREPL" />
      <setting name="execution" value="LEININGEN" />
      <setting name="jvmArgs" value="" />
      <setting name="parameters" value="" />
      <setting name="workingDir" value="" />
      <setting name="profiles" value="" />
      <setting name="aliases" value="" />
      <setting name="fixLineNumbers" value="false" />
      <method v="2" />
    </configuration>
    <configuration default="true" type="ClojureREPL" factoryName="Remote" activateToolWindowBeforeRun="false">
      <setting name="host" value="" />
      <setting name="port" value="0" />
      <setting name="replType" value="SOCKET" />
      <setting name="configType" value="SPECIFY" />
      <setting name="replPortFileType" value="STANDARD" />
      <setting name="customPortFile" value="" />
      <setting name="fixLineNumbers" value="false" />
      <method v="2" />
    </configuration>
    <configuration name="split-text.markdown" type="ClojureScriptRunConfiguration" factoryName="Clojure Script" temporary="true">
      <module name="split-text" />
      <setting name="path" value="$PROJECT_DIR$/src/split_text/markdown.clj" />
      <setting name="namespace" value="" />
      <setting name="execution" value="INTELLIJ" />
      <setting name="profiles" value="" />
      <setting name="aliases" value="" />
      <setting name="vmparams" value="" />
      <setting name="params" value="" />
      <setting name="workDir" value="$PROJECT_DIR$/src/split_text" />
      <method v="2" />
    </configuration>
    <list>
      <item itemvalue="Clojure Application.split-text.markdown" />
      <item itemvalue="Clojure REPL.REPL for split-text" />
      <item itemvalue="Clojure REPL.Reveal" />
    </list>
    <recent_temporary>
      <list>
        <item itemvalue="Clojure Application.split-text.markdown" />
      </list>
    </recent_temporary>
  </component>
  <component name="Vcs.Log.Tabs.Properties">
    <option name="TAB_STATES">
      <map>
        <entry key="MAIN">
          <value>
            <State>
              <option name="FILTERS">
                <map>
                  <entry key="branch">
                    <value>
                      <list>
                        <option value="master" />
                      </list>
                    </value>
                  </entry>
                </map>
              </option>
            </State>
          </value>
        </entry>
      </map>
    </option>
    <option name="oldMeFiltersMigrated" value="true" />
  </component>
  <component name="VcsManagerConfiguration">
    <MESSAGE value="removed unused code" />
    <MESSAGE value="Chapter and verse numbers added" />
    <MESSAGE value="Finished gettinginto db format for both couch and crux" />
    <MESSAGE value="After some success with crux" />
    <MESSAGE value="After first design of metadata" />
    <MESSAGE value="Start of output" />
    <MESSAGE value="Start of plain text output" />
    <MESSAGE value="Refactor Looking to work without db" />
    <MESSAGE value="Outputing using hiccup and no db" />
    <MESSAGE value="End of evening with markdown" />
    <MESSAGE value="Interlinear text phase one" />
    <MESSAGE value="Fixed oversized brakcets in bo and set up to use different folders on sync" />
    <MESSAGE value="Top and tail output with logo" />
    <MESSAGE value="Sorted header and logos between chapters" />
    <MESSAGE value="End of Phase A - Markdown to html" />
    <MESSAGE value="End of Phase B - End of First Feedback session - includes navigable pages" />
    <MESSAGE value="Amendments to menu, english only" />
    <MESSAGE value="Better division between output in and processing" />
    <option name="LAST_COMMIT_MESSAGE" value="Better division between output in and processing" />
  </component>
  <component name="WindowStateProjectService">
    <state x="606" y="280" key="#Notifications" timestamp="1607854902135">
      <screen x="0" y="0" width="1536" height="834" />
    </state>
    <state x="606" y="280" key="#Notifications/0.0.1536.834@0.0.1536.834" timestamp="1607854902135" />
    <state x="600" y="272" key="#com.intellij.debugger.actions.ViewTextAction" timestamp="1607857899252">
      <screen x="0" y="0" width="1536" height="834" />
    </state>
    <state x="600" y="272" key="#com.intellij.debugger.actions.ViewTextAction/0.0.1536.834@0.0.1536.834" timestamp="1607857899252" />
    <state x="225" y="72" key="#com.intellij.execution.impl.EditConfigurationsDialog" timestamp="1605381410773">
      <screen x="0" y="0" width="1536" height="834" />
    </state>
    <state x="225" y="72" key="#com.intellij.execution.impl.EditConfigurationsDialog/0.0.1536.834@0.0.1536.834" timestamp="1605381410773" />
    <state width="1233" height="379" key="GridCell.Tab.0.bottom" timestamp="1610290485608">
      <screen x="0" y="0" width="1536" height="834" />
    </state>
    <state width="1233" height="379" key="GridCell.Tab.0.bottom/0.0.1536.834@0.0.1536.834" timestamp="1610290485608" />
    <state width="1233" height="379" key="GridCell.Tab.0.center" timestamp="1610290485608">
      <screen x="0" y="0" width="1536" height="834" />
    </state>
    <state width="1233" height="379" key="GridCell.Tab.0.center/0.0.1536.834@0.0.1536.834" timestamp="1610290485608" />
    <state width="1233" height="379" key="GridCell.Tab.0.left" timestamp="1610290485608">
      <screen x="0" y="0" width="1536" height="834" />
    </state>
    <state width="1233" height="379" key="GridCell.Tab.0.left/0.0.1536.834@0.0.1536.834" timestamp="1610290485608" />
    <state width="1233" height="379" key="GridCell.Tab.0.right" timestamp="1610290485608">
      <screen x="0" y="0" width="1536" height="834" />
    </state>
    <state width="1233" height="379" key="GridCell.Tab.0.right/0.0.1536.834@0.0.1536.834" timestamp="1610290485608" />
    <state width="1233" height="379" key="GridCell.Tab.1.bottom" timestamp="1610290485609">
      <screen x="0" y="0" width="1536" height="834" />
    </state>
    <state width="1233" height="379" key="GridCell.Tab.1.bottom/0.0.1536.834@0.0.1536.834" timestamp="1610290485609" />
    <state width="1233" height="379" key="GridCell.Tab.1.center" timestamp="1610290485609">
      <screen x="0" y="0" width="1536" height="834" />
    </state>
    <state width="1233" height="379" key="GridCell.Tab.1.center/0.0.1536.834@0.0.1536.834" timestamp="1610290485609" />
    <state width="1233" height="379" key="GridCell.Tab.1.left" timestamp="1610290485608">
      <screen x="0" y="0" width="1536" height="834" />
    </state>
    <state width="1233" height="379" key="GridCell.Tab.1.left/0.0.1536.834@0.0.1536.834" timestamp="1610290485608" />
    <state width="1233" height="379" key="GridCell.Tab.1.right" timestamp="1610290485609">
      <screen x="0" y="0" width="1536" height="834" />
    </state>
    <state width="1233" height="379" key="GridCell.Tab.1.right/0.0.1536.834@0.0.1536.834" timestamp="1610290485609" />
    <state x="350" y="160" key="IDE.errors.dialog" timestamp="1605382572271">
      <screen x="0" y="0" width="1536" height="834" />
    </state>
    <state x="350" y="160" key="IDE.errors.dialog/0.0.1536.834@0.0.1536.834" timestamp="1605382572271" />
    <state x="279" y="0" key="SettingsEditor" timestamp="1610292738684">
      <screen x="0" y="0" width="1536" height="834" />
    </state>
    <state x="279" y="0" key="SettingsEditor/0.0.1536.834@0.0.1536.834" timestamp="1610292738684" />
    <state x="362" y="150" key="Vcs.Push.Dialog.v2" timestamp="1609505234730">
      <screen x="0" y="0" width="1536" height="834" />
    </state>
    <state x="362" y="150" key="Vcs.Push.Dialog.v2/0.0.1536.834@0.0.1536.834" timestamp="1609505234730" />
    <state width="774" height="423" key="XDebugger.FullValuePopup" timestamp="1607857915022">
      <screen x="0" y="0" width="1536" height="834" />
    </state>
    <state width="774" height="423" key="XDebugger.FullValuePopup/0.0.1536.834@0.0.1536.834" timestamp="1607857915022" />
    <state x="371" y="28" key="com.intellij.openapi.editor.actions.MultiplePasteAction$ClipboardContentChooser" timestamp="1610139623209">
      <screen x="0" y="0" width="1536" height="834" />
    </state>
    <state x="371" y="28" key="com.intellij.openapi.editor.actions.MultiplePasteAction$ClipboardContentChooser/0.0.1536.834@0.0.1536.834" timestamp="1610139623209" />
    <state x="579" y="331" key="com.intellij.openapi.vcs.update.UpdateOrStatusOptionsDialogupdate-v2" timestamp="1608727779027">
      <screen x="0" y="0" width="1536" height="834" />
    </state>
    <state x="579" y="331" key="com.intellij.openapi.vcs.update.UpdateOrStatusOptionsDialogupdate-v2/0.0.1536.834@0.0.1536.834" timestamp="1608727779027" />
    <state x="431" y="155" width="695" height="678" key="search.everywhere.popup" timestamp="1610288244373">
      <screen x="0" y="0" width="1536" height="834" />
    </state>
    <state x="431" y="155" width="695" height="678" key="search.everywhere.popup/0.0.1536.834@0.0.1536.834" timestamp="1610288244373" />
  </component>
</project>